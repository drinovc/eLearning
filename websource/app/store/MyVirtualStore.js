/*
 * File: app/store/MyVirtualStore.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('eLearning.store.MyVirtualStore', {
    extend: 'Ext.data.virtual.Store',

    requires: [
        'Ext.data.proxy.Rest'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'MyVirtualStore',
            proxy: {
                type: 'proxy.idb',
                updateModel: function(model) {
                    this.callParent(arguments);

                    var me = this,
                        modelName = model.modelName,
                        osName = modelName.slice(modelName.lastIndexOf('.') + 1);

                    //Default the objectStoreName to the class name of the Model
                    if (!me.getObjectStoreName()) {
                        me.setObjectStoreName(osName);
                    }

                    me.setUniqueIdStrategy(model.getIdentifier().isUnique);
                },
                checkObjectStoreExists: function(cb, args) {
                    var me = this,
                        vRequest,
                        model = me.getModel(),
                        osName = me.getObjectStoreName() || model.modelName.slice(model.modelName.lastIndexOf('.') + 1);

                    var doUpgrade = function(e) {
                        var keyPath = {
                            keyPath: model.getIdProperty(),
                            autoIncrement: !model.getIdentifier().isUnique
                        },
                        os = e.target.result.createObjectStore(osName, keyPath);
                    };

                    if (!me.getObjectStoreExists()) {
                        vRequest = indexedDB.open(me.getDatabaseName());

                        vRequest.onupgradeneeded = doUpgrade;

                        vRequest.onsuccess = function(e) {
                            var db = e.target.result,
                                name = db.name,
                                version = db.version,
                                osExists = db.objectStoreNames.contains(osName),
                                uRequest;

                            db.close();

                            if (!osExists) {
                                version += 1;
                                uRequest = indexedDB.open(me.getDatabaseName(), version);
                                uRequest.onupgradeneeded = doUpgrade;

                                uRequest.onsuccess = function(e) {
                                    e.target.result.close();
                                    me.setObjectStoreExists(true);
                                    cb.apply(me, args);
                                };
                            } else {
                                me.setObjectStoreExists(true);
                                cb.apply(me, args);
                            }
                        };
                    }

                    return me.getObjectStoreExists();
                },
                create: function(operation, callback, scope) {
                    /**
                    * create override
                    */
                    var me = this,
                        records = operation.getRecords(),
                        errors = [],
                        data = [],
                        createdRecords = [],
                        executed = 0,
                        totalRecords = records.length,
                        result,
                        uniqueIdStrategy = me.getUniqueIdStrategy(),
                        transaction, store;

                    if (!me.checkObjectStoreExists(me.create, arguments)) {
                        return;
                    }

                    var onSuccess = function(e) {
                        var db = e.target.result;

                        operation.setStarted();

                        transaction = db.transaction([me.getObjectStoreName()], "readwrite");
                        store = transaction.objectStore(me.getObjectStoreName());

                        result = new Ext.data.ResultSet({
                            records: createdRecords,
                            success: true
                        });

                        transaction.onerror = function(e) {
                            db.close();
                            if (operation.process(operation.getAction(), result) === false) {
                                me.fireEvent('exception', me, operation);
                            }
                            operation.setException(e.target.result);
                            if (typeof callback == 'function') {
                                callback.call(scope || me, operation);
                            }
                        };

                        Ext.each(records, function(record) {
                            var data = me.getRecordData(record),
                                request = store.add(data),
                                id = record.getId();

                            request.onerror = function(e) {
                                executed++;

                                errors.push({
                                    clientId: id,
                                    error: e.target.result
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    operation.setException(errors);
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                            request.onsuccess = function(e) {
                                executed++;

                                createdRecords.push({
                                    clientId: id,
                                    id: uniqueIdStrategy ? id : e.target.result,
                                    data: data,
                                    node: data
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    if (errors.length > 0) {
                                        operation.setException(errors);
                                    }
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                        });
                    };

                    var oRequest = indexedDB.open(me.getDatabaseName());
                    oRequest.onsuccess = onSuccess;
                },
                read: function(operation, callback, scope) {
                    /**
                    * read override
                    */
                    var me = this,
                        model = me.getModel(),
                        idProperty = model.getIdProperty(),
                        params = operation.getParams() || {},
                        id = params[idProperty],
                        sorters = operation.getSorters(),
                        filters = operation.getFilters(),
                        page = operation.getPage(),
                        start = operation.getStart(),
                        limit = operation.getLimit(),
                        records = [],
                        count = 0,
                        filtered, i, ln, transaction, store, cursor, result;

                    if (!me.checkObjectStoreExists(me.read, arguments)) {
                        return;
                    }

                    var onSuccess = function(e) {
                        var db = e.target.result;

                        operation.setStarted();

                        transaction = db.transaction([me.getObjectStoreName()], "readonly");
                        store = transaction.objectStore(me.getObjectStoreName());

                        result = new Ext.data.ResultSet({
                            records: records,
                            success: true
                        });


                        //TODO use indexes for valid filters?
                        cursor = store.openCursor();

                        cursor.onsuccess = function(e) {
                            var c = e.target.result,
                                data = {};

                            if (c === null) {
                                db.close();
                                result.setSuccess(true);
                                result.setTotal(count);
                                result.setCount(count);

                                if (operation.process(operation.getAction(), result) === false) {
                                    me.fireEvent('exception', me, operation);
                                }

                                if (filters && filters.length) {
                                    filtered = Ext.create('Ext.util.Collection', function(record) {
                                        return record.getId();
                                    });
                                    filtered.setFilterRoot('data');
                                    for (i = 0, ln = filters.length; i < ln; i++) {
                                        filtered.addFilter(filters[i]);
                                    }
                                    filtered.addAll(operation.getRecords());

                                    operation.setRecords(filtered.items.slice());
                                    resultSet.setRecords(operation.getRecords());
                                    resultSet.setCount(filtered.items.length);
                                    resultSet.setTotal(filtered.items.length);
                                }

                                if (typeof callback == 'function') {
                                    callback.call(scope || me, operation);
                                }
                                return;
                            }

                            for (var f in c.value) {
                                data[f] = c.value[f];
                            }
                            records.push({
                                clientId: null,
                                id: data[idProperty],
                                data: data,
                                node: data
                            });
                            count++;
                            c['continue']();
                        };

                        //TODO errors
                        cursor.onerror = function(e) {
                            //console.debug(e);
                        };

                        transaction.onerror = function(e) {
                            db.close();
                            operation.setException(e.target.result);
                            if (typeof callback == 'function') {
                                callback.call(scope || me, operation);
                            }
                        };
                    };

                    var oRequest = indexedDB.open(me.getDatabaseName());
                    oRequest.onsuccess = onSuccess;
                },
                update: function(operation, callback, scope) {
                    /**
                    * update override
                    */
                    var me = this,
                        records = operation.getRecords(),
                        errors = [],
                        data = [],
                        updatedRecords = [],
                        executed = 0,
                        totalRecords = records.length,
                        result,
                        transaction, store;

                    if (!me.checkObjectStoreExists(me.update, arguments)) {
                        return;
                    }

                    var onSuccess = function(e) {
                        var db = e.target.result;

                        operation.setStarted();

                        transaction = db.transaction([me.getObjectStoreName()], "readwrite");
                        store = transaction.objectStore(me.getObjectStoreName());

                        result = new Ext.data.ResultSet({
                            records: updatedRecords,
                            success: true
                        });

                        transaction.onerror = function(e) {
                            if (operation.process(operation.getAction(), result) === false) {
                                me.fireEvent('exception', me, operation);
                            }
                            operation.setException(e.target.result);
                        };

                        Ext.each(records, function(record) {
                            var data = me.getRecordData(record),
                                request = store.put(data),
                                id = record.getId();

                            request.onerror = function(e) {
                                executed++;

                                errors.push({
                                    clientId: id,
                                    error: e.target.result
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    operation.setException(errors);
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                            request.onsuccess = function(e) {
                                executed++;

                                updatedRecords.push({
                                    clientId: id,
                                    id: id,
                                    data: data,
                                    node: data
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    if (errors.length > 0) {
                                        operation.setException(errors);
                                    }
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                        });
                    };

                    var oRequest = indexedDB.open(me.getDatabaseName());
                    oRequest.onsuccess = onSuccess;
                },
                destroy: function(operation, callback, scope) {
                    /**
                    * destroy override
                    */
                    var me = this,
                        records = operation.getRecords(),
                        errors = [],
                        data = [],
                        destroyedRecords = [],
                        executed = 0,
                        totalRecords = records.length,
                        result,
                        uniqueIdStrategy = me.getUniqueIdStrategy(),
                        transaction, store;

                    if (!me.checkObjectStoreExists(me.destroy, arguments)) {
                        return;
                    }

                    var onSuccess = function(e) {
                        var db = e.target.result;

                        operation.setStarted();

                        result = new Ext.data.ResultSet({
                            records: destroyedRecords,
                            success: true
                        });

                        transaction = db.transaction([me.getObjectStoreName()], "readwrite");
                        store = transaction.objectStore(me.getObjectStoreName());

                        transaction.onerror = function(e) {
                            db.close();
                            if (operation.process(operation.getAction(), result) === false) {
                                me.fireEvent('exception', me, operation);
                            }
                            operation.setException(e.target.result);
                            if (typeof callback == 'function') {
                                callback.call(scope || me, operation);
                            }
                        };

                        Ext.each(records, function(record) {
                            var id = record.getId();
                            request = store['delete'](id);

                            request.onerror = function(e) {
                                executed++;

                                errors.push({
                                    clientId: id,
                                    error: e.target.result
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    operation.setException(errors);
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                            request.onsuccess = function(e) {
                                executed++;

                                destroyedRecords.push({
                                    clientId: id,
                                    id: id,
                                    data: data,
                                    node: data
                                });

                                if (executed === totalRecords) {
                                    db.close();
                                    if (operation.process(operation.getAction(), result) === false) {
                                        me.fireEvent('exception', me, operation);
                                    }
                                    if (errors.length > 0) {
                                        operation.setException(errors);
                                    }
                                    if (typeof callback == 'function') {
                                        callback.call(scope || me, operation);
                                    }
                                }
                            };

                        });
                    };

                    var oRequest = indexedDB.open(me.getDatabaseName());
                    oRequest.onsuccess = onSuccess;
                },
                getRecordData: function(record) {
                    /**
                    * @private
                    * Bundle model data up into an object to write to in IndexedDB Object Store.
                    */
                    var me = this,
                        fields = record.getFields(),
                        idProperty = record.getIdProperty(),
                        data = {},
                        name, value;

                    fields.each(function(field) {
                        if (field.getPersist()) {
                            name = field.getName();
                            if (name === idProperty && !me.getUniqueIdStrategy()) {
                                return;
                            }
                            value = record.get(name);
                            data[name] = value;
                        }
                    }, me);

                    return data;
                },
                init_TODO: function() {
                    // todo - source- https://fiddle.sencha.com/#view/editor&fiddle/1tpo

                    this.config = {
                        /**
                        * The Database Name
                        */
                        databaseName: null,

                        /**
                        * The IndexedDB Object Store name. Defaults to the Model's name if not set
                        */
                        objectStoreName: null,

                        /**
                        * private
                        */
                        uniqueIdStrategy: false,

                        /**
                        * private
                        */
                        objectStoreExists: false
                    };
                }
            }
        }, cfg)]);
    }
});