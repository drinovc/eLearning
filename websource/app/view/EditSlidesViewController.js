/*
 * File: app/view/EditSlidesViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('eLearning.view.EditSlidesViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.editslides',

    load: function(opts) {
        opts = Ext.applyIf(opts || {}, {
            program: null
        });

        var me = this,
            refs = me.getReferences();

        refs.panelHeader.setTitle(opts.program.get('name'));
    },

    newSection: function() {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('TreeStoreSlides');

        var data = {
            id: createGUID(),
            sequence: null,
            title: 'New Section',
            content: null,
            expanded: true,
            children: []
        };

        var parentNode = /*refs.treeSlides.getSelection()[0] ||*/ store.getRoot();

        slide = parentNode.appendChild(data);
        refs.treeSlides.setSelection(slide);

        //me.saveSlideState(slide);
    },

    newSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('TreeStoreSlides'),
            parentNode = refs.treeSlides.getSelection()[0] || store.getRoot(),
            slide,
            data = {
                id: createGUID(),
                // sequence: sequence,
                title: 'New Slide', // + sequence,
                content: null,
                expanded: true,
                leaf: true
            };

        if(parentNode.isLeaf()) {
            parentNode = parentNode.parentNode;
        }

        slide = parentNode.appendChild(data);
        refs.treeSlides.setSelection(slide);

        me.saveSlideState(slide);
    },

    deleteSlide: function(slide) {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('TreeStoreSlides');

        slide = slide || me.getCurrentSlide();

        if(slide) {
            var nextSlideIdx = store.indexOf(slide) - 1,
                nextSlide = store.getAt(nextSlideIdx >= 0 ? nextSlideIdx : 1),
                components = (Ext.decode(slide.get('content') || '{}').components);

            if(components && components.length > 0) {
                Ext.Msg.confirm('Delete slide', 'Are you sure?', function(btn) {
                    if(btn == 'yes') {
                        store.remove(slide);
                        me.clearSlidePanel();
                        refs.treeSlides.setSelection(nextSlide);
                    }
                });
            }
            else {
                store.remove(slide);
                me.clearSlidePanel();
                refs.treeSlides.setSelection(nextSlide);
            }
        }
    },

    getCurrentSlide: function() {
        var me = this,
            refs = me.getReferences();

        return refs.treeSlides.getSelection()[0];
    },

    nextSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('TreeStoreSlides'),
            slide = me.getCurrentSlide(),
            nextSlideIdx = store.indexOf(slide) + 1,
            nextSlide = store.getAt(nextSlideIdx);

        if(nextSlide) {
            refs.treeSlides.setSelection(nextSlide);
        }
    },

    prevSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('TreeStoreSlides'),
            slide = me.getCurrentSlide(),
            nextSlideIdx = store.indexOf(slide) - 1,
            nextSlide = store.getAt(nextSlideIdx);

        if(nextSlide) {
            refs.treeSlides.setSelection(nextSlide);
        }
    },

    setBackground: function(src) {
        var me = this,
            refs = me.getReferences();

        me._pageSetup.background = src;

        if(src) {
            Ext.getCmp('panelContent').setStyle('background', 'url(' + src + ')');
        }
        else {
            Ext.getCmp('panelContent').setStyle('background', null);
        }
    },

    togglePreview: function(preview) {
        var me = this,
            refs = me.getReferences();

        refs.panelMenu.setVisible(!preview);
        refs.toolbarEdit.setVisible(!preview);
        refs.toolbarPreview.setVisible(!!preview);
        refs.panelContent[preview ? 'removeCls' : 'addCls']('edit');
        refs.panelContent[preview ? 'addCls' : 'removeCls']('preview');

        refs.panelSlide.setMargin(preview ? '10' : '10 10 10 0');

        if(preview) {
            me.saveSlideState(me.getCurrentSlide());
            refs.treeSlides.setSelection(refs.treeSlides.store.getAt(0));
        }
    },

    getFreePosition: function() {
        var me = this,
            refs = me.getReferences(),
            snap = me._pageSetup.snap,
            pos = {
                x: snap*2,
                y: snap*2,
                width: me.round(refs.panelContent.el.getWidth() - 2*snap*2),
                height: snap*2
            };

        Ext.each(refs.panelContent.el.query('.html-component'), function(component) {
            pos.y = me.round(Math.max(pos.y, component.y + component.height + snap));
        });

        return pos;
    },

    getSlideComponents: function() {
        return this.getReferences().panelContent.el.query('.html-component');
    },

    getCurrentState: function() {
        var me = this,
            refs = me.getReferences(),
            slides = Ext.clone(Ext.pluck(refs.treeSlides.store.getRange(), 'data')).map(function(node) { return cleanTreeNodeData(node); });
            data = {
                slides: slides,
                pageSetup: me._pageSetup
            };

        return data;
    },

    saveSlideState: function(slide) {
        var me = this,
            refs = me.getReferences(),
            content = {
                components: []
            };

        slide = slide || me.getCurrentSlide();

        if(slide) {

            Ext.each(me.getSlideComponents(), function(component) {
                content.components.push(component._opts);
            });

            slide.set('content', Ext.encode(content));

            // save state to offline storage - switch to indexdb at some point?
            localStorage.setItem('mxp_elearning_slide', Ext.encode(me.getCurrentState()));
        }
    },

    loadSlideState: function(slide) {
        var me = this,
            refs = me.getReferences(),
            parentEl = refs.panelContent.el.down('#html-slide');

        me.clearSlidePanel();

        if(slide) {
            var content = Ext.decode(slide.get('content') || '{}');

            Ext.each(content.components, function(component) {
                this.insertComponent(component);
            }, this);

            me._selectedComponent = null;
        }
    },

    clearSlidePanel: function() {
        var me = this,
            refs = me.getReferences(),
            parentEl = refs.panelContent.el.down('#html-slide');

        me.hideComponentTools();

        Ext.each(parentEl.query('.html-component'), function(component) {
            parentEl.removeChild(component);
        }, this);
    },

    addComponentListeners: function(item) {
        var me = this,

        item = Ext.get(item);

        item.on('click', function(e, t) {
            var prevItem = me._selectedComponent;

            if(prevItem) {
                me._selectedComponent.removeCls('selected');
                if(me._tools) {
                    me._tools = null;
                }

                if(prevItem == item) {
                    me.hideComponentTools();
                    me._selectedComponent = null;
                    return;
                }
            }
            me._selectedComponent = item;
            me._selectedComponent.addCls('selected');
            me.showComponentTools(item);
        });

        item.on('dblclick', function(e, t) {
            me.editComponent(item);
        });

        item.on('_edit', function(e, t) {
            me.editComponent(item);
        });

        item.on('_duplicate', function(e, t) {
            me.duplicateComponent(item);
        });

        item.on('_delete', function(e, t) {
            me.deleteComponent(item);
            me.hideComponentTools(item);
        });
    },

    showComponentTools: function(component) {
        var me = this;

        if(!me._componentTools) {
            me._componentTools = me.getView().add({ xtype: 'edittools' });
        }
        me._componentTools.getController().show({ component: component });
    },

    hideComponentTools: function(component) {
        var me = this;

        if(!me._componentTools) {
            me._componentTools = me.getView().add({ xtype: 'edittools' });
        }
        me._componentTools.close();
    },

    insertComponent: function(opts) {
        opts = Ext.applyIf(opts || {}, {
            type: null,
            height: null,
            width: null,
            x: null,
            y: null,
            html: '',
            options: [],
            multi: false,
            src: '',
            cls: null,
            style: null
        });

        if(!opts.type) {
            Ext.Msg.alert('Error', 'No component type');
        }

        if(opts.cls && typeof opts.cls == "string") {
            opts.cls = [opts.cls];
        }

        var me = this,
            refs = me.getReferences(),
            pos = me.getFreePosition(),
            snap = me._pageSetup.snap,
            parentEl = refs.panelContent.el.down('#html-slide'),
            cmp = document.createElement('div');

        if(!me.getCurrentSlide()) {
            me.newSlide();
        }

        // set size
        // if(opts.type == 'image' && opts.src) {
        //     // determine image size
        //     var img = new Image();

        //     img.onload = function() {
        //         cmp.width = me.round(isNull(opts.width, img.width));
        //         cmp.height = me.round(isNull(opts.height, img.height));
        //         cmp.style.width = cmp.width + 'px';
        //         cmp.style.height = cmp.height + 'px';
        //     };
        //     img.src = opts.src;

        //     // show image as background
        //      cmp.style.backgroundImage = 'url(' + opts.src + ')';
        // }
        // else {
            cmp.width = opts.width = me.round(isNull(opts.width, pos.width));
            cmp.height = opts.height = me.round(isNull(opts.height, pos.height));
            cmp.style.width = cmp.width + 'px';
            cmp.style.height = cmp.height + 'px';
        // }

        // set classes
        cmp.classList.add('html-component');

        // set position
        cmp.x = opts.x = isNull(opts.x, pos.x);
        cmp.y = opts.y = isNull(opts.y, pos.y);

        cmp.style.left = cmp.x + 'px';
        cmp.style.top = cmp.y + 'px';

        // set content
        var content = document.createElement('div');
        var html = opts.html;

        content.classList.add('html-content');
        Ext.each(opts.cls, function(cls) { content.classList.add(cls); });

        if(opts.type == me.cmpTypes.SELECTION && opts.options) {
            html = '<div clas="text">' + html + '</div>';

            Ext.each(opts.options, function(option) {
                var cls = ['option', (opts.multi ? 'check' : 'radio')];

                if(option.correct) {
                    cls.push('correct');
                }
                html += '<div class="' + cls.join(' ') + '">' + option.text + '</div>';
            });
        }

        if(opts.type == me.cmpTypes.IMAGE && opts.src) {
            content.style.backgroundImage = 'url(' + opts.src + ')';
        }

        content.innerHTML = html;
        content = cmp.appendChild(content);

        cmp = parentEl.dom.appendChild(cmp);

        cmp._opts = opts;
        cmp.type = opts.type;
        Ext.get(cmp)._opts = opts;
        Ext.get(cmp).type = opts.type;

        cmp._dragger = new Ext.drag.Source({
            element: Ext.get(cmp),
            constrain: {
                element: parentEl,
                snap: {
                    x: snap,
                    y: snap
                },
            },
            listeners: {
                beforedragstart: function(component, info, event, eOpts) {
                    if(info.eventTarget.classList.contains('x-resizable-handle')) {
                        return false;
                    }
                },
                dragcancel: function(component, info, event, eOpts) {
                    console.log('dragcancel', arguments);
                },
                dragend: function(component, info, event, eOpts) {
                    console.log('dragend', arguments);
                },
                dragmove: function(component, info, event, eOpts) {
                    var pos = info.element.current,
                        x = pos.x - parentEl.getX(),
                        y = pos.y - parentEl.getY();

                    cmp._opts.x = x;
                    cmp._opts.y = y;
        //             console.log(Ext.String.format('dragmove X: {0}, Y: {1}', x, y));
                },
                dragstart: function(component, info, event, eOpts) {
                    console.log('dragstart', arguments);
                }
            }
        });

        cmp._resizer = Ext.create('Ext.create', 'Ext.resizer.Resizer', {
            target: Ext.get(cmp),
            //pinned:true,
            minWidth: snap,
            minHeight: snap,
            heightIncrement: snap,
            widthIncrement: snap,
            preserveRatio: false,
            dynamic:true,
            transparent: false,
            handles: 'all', // shorthand for 'n s e w ne nw se sw'
            listeners: {
                resize: function(component, width, height, e, eOpts) {
                    cmp.width = width;
                    cmp.height = height;

                    cmp._opts.width = width;
                    cmp._opts.height = height;
        //             console.log(Ext.String.format('W: {0}, H: {1}', width, height));
                }
            }
        });

        me.addComponentListeners(cmp);
        me.saveSlideState();

        return Ext.get(cmp);
    },

    editComponent: function(component) {
        var me = this,
            refs = me.getReferences();

        component = component || me._selectedComponent;

        if(component) {
            if(component.type == me.cmpTypes.SELECTION) {
                me.editSelection(component);
            }
            else {
                var wnd = me.getView().add({ xtype: 'texteditor' });

                wnd.getController().show({
                    value: component.el.down('.html-content').dom.innerHTML,
                    callback: function(value) {
                        component.el.down('.html-content').dom.innerHTML = value;
                        component._opts.html = value;
                        me.saveSlideState();
                    },
                    scope: me
                });
            }
        }
    },

    duplicateComponent: function(component) {
        var opts = Ext.clone(component._opts);

        delete opts.x;
        delete opts.y;

        var cmp = this.insertComponent(opts);

        cmp.fireEvent('click');
    },

    deleteComponent: function(component) {
        var me = this,
            refs = this.getReferences();

        component = component || me._selectedComponent;

        if(component) {
            me._selectedComponent.destroy();
            me._selectedComponent = null;
            me.saveSlideState();
        }
    },

    insertTitle: function(value) {
        var me = this,
            cmp = me.insertComponent({
                type: me.cmpTypes.TITLE,
                cls: 'title',
                html: value || 'Title',
                height: 50
            });

        // me.editComponent(cmp);
    },

    insertText: function(value) {
        var me = this,
            cmp = me.insertComponent({
                type: me.cmpTypes.TEXT,
                cls: 'text',
                html: value || 'Text',
                height: 425
            });

        // me.editComponent(cmp);
    },

    insertImage: function() {
        var me = this,
            cmp = me.insertComponent({
                type: me.cmpTypes.IMAGE,
                cls: 'image',
                html: '',
                src: 'resources/images/example.jpg',
                height: 275,
            });
    },

    insertSelection: function(opts) {
        this.editSelection(null, opts);
    },

    editSelection: function(component, opts) {
        opts = Ext.applyIf(opts || {}, {
            multi: false
        });

        var me = this,
            refs = me.getReferences(),
            state = component && component._opts,
            multi = state && state.multi || opts.multi,
            wnd = me.getView().add({ xtype: 'selectioneditor' });

        wnd.getController().show({
            text: state && state.html,
            options: state && state.options,
            multi: multi,
            callback: function(text, answers) {

                if(answers.length === 0) {
                    return 'Please specify at least one answer';
                }
                if(answers.filter(function(item) { return item.correct; }).length === 0) {
                    return 'Please mark at least one answer as correct';
                }
                if(!multi && answers.filter(function(item) { return item.correct; }).length > 1) {
                    return 'Only one correct answer is allowed for single selection';
                }

                if(component) {
                    var state = component._opts;

                    me.deleteComponent(component);
                    state.html = text;
                    state.options = answers;

                    component = me.insertComponent(state);
                }
                else {
                    component = me.insertComponent({
                        type: me.cmpTypes.SELECTION,
                        cls: 'selection',
                        html: text,
                        options: answers,
                        multi: multi,
                        height: 100
                    });
                }

            },
            scope: me
        });
    },

    round: function(value) {
        var snap = this._pageSetup.snap;

        return Math.round(value / snap) * snap;
    },

    ceil: function() {
        var snap = this._pageSetup.snap;

        return Math.ceil(value / snap) * snap;
    },

    close: function(owner, tool, event) {
        this.getView().up('#mainView').setActiveItem('gridPrograms');
    },

    onTreeSlidesSelect: function(rowmodel, record, index, eOpts) {
        if(record.isLeaf()) {
            this.loadSlideState(record);
        }
        else {
            this.clearSlidePanel();
            this.insertTitle('Section ' + record.get('title'));
        }
    },

    onTreeSlidesDeselect: function(rowmodel, record, index, eOpts) {
        this.saveSlideState(record);
    },

    onEditSlidesBoxReady: function(component, width, height, eOpts) {
        var me = this,
            refs = me.getReferences();

        me._selectedComponent = null;

        me._pageSetup = {
            snap: 25,
            width: 800,
            height: 600,
            headerHeight: 50,
            footerHeight: 50,
            padding: 50,
            background: null
        };

        me.cmpTypes = {
            HTML: 'html',
            TITLE: 'title',
            TEXT: 'text',
            IMAGE: 'image',
            SELECTION: 'selection'
        };

        refs.panelContent.removeAll();
        refs.toolbarPreview.hide();

        // load state from offline storage - switch to indexdb at some point?
        var data = localStorage.getItem('mxp_elearning_slide');

        if(data) {
            data = Ext.decode(data);
            if(data.pageSetup) {
                me._pageSetup = Ext.applyIf(data.pageSetup, me._pageSetup);
            }
            if(data.slides) {
                me.getStore('TreeStoreSlides').setData(data.slides);
                Ext.defer(function() {
                    me.nextSlide();
                }, 100);
            }
        }

        me.setBackground(me._pageSetup.background);
        refs.panelContent.setWidth(me._pageSetup.width);
        refs.panelContent.setHeight(me._pageSetup.height);
    }

});
