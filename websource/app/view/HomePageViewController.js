/*
 * File: app/view/HomePageViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('eLearning.view.HomePageViewController', {
	extend: 'Ext.app.ViewController',
	alias: 'controller.homepage',

	requires: [
		'Ext.route.Route'
	],

	routes: {
		'training-programs': {
			name: 'routeTrainingPrograms',
			action: 'triggerTrainingPrograms'
		},
		'edit-pages/:id': {
			before: function(id, action) {
				// insert check if user can access this program id


				// action.stop();
				// action.stop(true);
				action.resume();
			},
			name: 'routeEditPages',
			action: 'triggerEditPages'
		},
		'home': {
			name: 'routeHome',
			action: 'triggerHome'
		}
	},

	triggerTrainingPrograms: function() {
		var me = this,
			mainView = me.getView().up('#mainView'),
			newActiveItem = mainView.setActiveItem('gridPrograms');

		// loading this programs edit slides
		newActiveItem.getController().load({ person : me.person }); // pass person
	},

	triggerEditPages: function(id) {
		var me = this;

		if(navigator.onLine){
		Ext.Promise.all([
			getAjax('/Pub/Programs', {}, 'Programs')
		]).then(function(data) {

			var records = data[0].data;

			id = ('{' + id + '}') || (records.length? records[0].id : "{BA8780A3-9D57-40D5-8623-7033A31323D8}");

			var record;
			for(var i = 0; i < records.length; i++){
				if(records[i].id == id){
					record = records[i];
				}
			}
			if(!record){
				console.warn("Record doesn't exist - debug program. Refresh page to keep data in localstorage, not everything supported");
				record = {};
				record.data ={
					"active":true,
					"categoryId":30231143,
					"certificateFileName":"",
					"changed":"Y",
					"completionTime":60,
					"created":"2018-07-23T12:04:00",
					"createdAtId":5,
					"createdById":0,
					"description":"New Training Program Description",
					"id":id,
					"lastChangeLogId":191175066,
					"lastChanges":"2018-07-23T12:04:00",
					"maxAttemptsScoreMode":1000,
					"maxAttemptsTrainingMode":1000,
					"name":"First program",
					"passScore":2,
					"programId":50000026,
					"validFrom":"2018-07-23T00:00:00",
					"validTo":"2019-07-23T00:00:00"
				};

			}
			var mainView = me.getView().up('#mainView');
			var newActiveItem = mainView.setActiveItem('editSlides');


			// initiating localstorage data for this program if it hasn't been yet
			var localStorageData = Ext.decode(localStorage.getItem('mxp_elearning'));
			if(!localStorageData){
				localStorageData = {};
			}
			if(!localStorageData[id]){
				localStorageData[id] = {};
			}
			for (var key in localStorageData[id]) {
				if(!localStorageData[id][key]){
					localStorageData[id][key]={};
				}
			}
			localStorage.setItem('mxp_elearning', Ext.encode(localStorageData));

			print("reroiting when online data", record);


			// loading this programs edit slides
			newActiveItem.getController().load({ program :{
				data: record,
				id :id
			} }); // with programId
		});
		}else{
			// if we are offline - get data from localStorage


			var localStorageData = Ext.decode(localStorage.getItem('mxp_elearning')),
				mainView = me.getView().up('#mainView'),
				newActiveItem = mainView.setActiveItem('editSlides'),
				id = ('{' + id + '}'),

			record = localStorageData[id].programInfo;

			print("reroiting when offline data", record);
			newActiveItem.getController().load({
				program :{
					data: record,
					id :id
				},
				person: me.person
			}); //
		}
	},

	triggerHome: function() {
		this.getView().up('#mainView').setActiveItem('homePage');
	},

	onSave: function(button, e, eOpts) {
		var me = this,
			form = me.getReferences().form,
			values = form.getForm().getValues(),
			store = me.getStore('logins');

		// Valid
		if (form.isValid()) {

			// TODO: Assign the record's ID from data source
			// Normally, this value would be auto-generated,
			// or returned from the server
			values.id = store.count() + 1;

			console.warn("Todo hash pin after sending on load");

			store.load({
				params:{
					user: values.user,
					pin: values.pin
				},
				callback: function(rec){
					if(!rec[0].data){
						Ext.toast("No results recieved");
					}
					rec = rec[0].data.data[0];
					if(rec.PIN_CODE_CORRECT){
						Ext.toast("Welcome " +rec.PERSON_FIRST_NAME + " " + rec.PERSON_LAST_NAME);
						me.person = rec;
						print("printing person", rec);
						me.personId = rec.PERSON_ID;
						form.close();
					}else{
						Ext.toast("Wrong username or password");
					}
				}

			});
		}
	},

	onCancel: function(button, e, eOpts) {
		var form = this.getReferences().form;
		form.close();
	}

});
