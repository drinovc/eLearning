{
    "type": "Ext.data.virtual.Store",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MyVirtualStore",
        "storeId": "MyVirtualStore"
    },
    "configAlternates": {
        "designer|userClassName": "string",
        "storeId": "string"
    },
    "name": "MyVirtualStore",
    "designerId": "2714aef4-8e05-4849-8c3f-b98ac5f29da5",
    "cn": [
        {
            "type": "Ext.data.proxy.Rest",
            "reference": {
                "name": "proxy",
                "type": "object"
            },
            "codeClass": null,
            "userConfig": {
                "designer|createAlias": "proxy.idb"
            },
            "configAlternates": {
                "designer|createAlias": "string"
            },
            "name": "MyRestProxy1",
            "designerId": "303df818-718a-4122-8b62-f5fff489adfe",
            "cn": [
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "model"
                        ],
                        "fn": "updateModel",
                        "implHandler": [
                            "this.callParent(arguments);",
                            "",
                            "var me = this,",
                            "    modelName = model.modelName,",
                            "    osName = modelName.slice(modelName.lastIndexOf('.') + 1);",
                            "",
                            "//Default the objectStoreName to the class name of the Model",
                            "if (!me.getObjectStoreName()) {",
                            "    me.setObjectStoreName(osName);",
                            "}",
                            "",
                            "me.setUniqueIdStrategy(model.getIdentifier().isUnique);"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "updateModel",
                    "designerId": "3b1d56ac-de2a-40b5-9ecf-bf321e0f249d"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "cb",
                            "args"
                        ],
                        "fn": "checkObjectStoreExists",
                        "implHandler": [
                            "var me = this,",
                            "    vRequest,",
                            "    model = me.getModel(),",
                            "    osName = me.getObjectStoreName() || model.modelName.slice(model.modelName.lastIndexOf('.') + 1);",
                            "",
                            "var doUpgrade = function(e) {",
                            "    var keyPath = {",
                            "        keyPath: model.getIdProperty(),",
                            "        autoIncrement: !model.getIdentifier().isUnique",
                            "    },",
                            "        os = e.target.result.createObjectStore(osName, keyPath);",
                            "};",
                            "",
                            "if (!me.getObjectStoreExists()) {",
                            "    vRequest = indexedDB.open(me.getDatabaseName());",
                            "",
                            "    vRequest.onupgradeneeded = doUpgrade;",
                            "",
                            "    vRequest.onsuccess = function(e) {",
                            "        var db = e.target.result,",
                            "            name = db.name,",
                            "            version = db.version,",
                            "            osExists = db.objectStoreNames.contains(osName),",
                            "            uRequest;",
                            "",
                            "        db.close();",
                            "",
                            "        if (!osExists) {",
                            "            version += 1;",
                            "            uRequest = indexedDB.open(me.getDatabaseName(), version);",
                            "            uRequest.onupgradeneeded = doUpgrade;",
                            "",
                            "            uRequest.onsuccess = function(e) {",
                            "                e.target.result.close();",
                            "                me.setObjectStoreExists(true);",
                            "                cb.apply(me, args);",
                            "            };",
                            "        } else {",
                            "            me.setObjectStoreExists(true);",
                            "            cb.apply(me, args);",
                            "        }",
                            "    };",
                            "}",
                            "",
                            "return me.getObjectStoreExists();"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "checkObjectStoreExists",
                    "designerId": "1e663823-3e79-4f38-8c5b-bf0a188261c4"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "operation",
                            "callback",
                            "scope"
                        ],
                        "fn": "create",
                        "implHandler": [
                            "    /**",
                            "     * create override",
                            "     */",
                            "var me = this,",
                            "    records = operation.getRecords(),",
                            "    errors = [],",
                            "    data = [],",
                            "    createdRecords = [],",
                            "    executed = 0,",
                            "    totalRecords = records.length,",
                            "    result,",
                            "    uniqueIdStrategy = me.getUniqueIdStrategy(),",
                            "    transaction, store;",
                            "",
                            "if (!me.checkObjectStoreExists(me.create, arguments)) {",
                            "    return;",
                            "}",
                            "",
                            "var onSuccess = function(e) {",
                            "    var db = e.target.result;",
                            "",
                            "    operation.setStarted();",
                            "",
                            "    transaction = db.transaction([me.getObjectStoreName()], \"readwrite\");",
                            "    store = transaction.objectStore(me.getObjectStoreName());",
                            "",
                            "    result = new Ext.data.ResultSet({",
                            "        records: createdRecords,",
                            "        success: true",
                            "    });",
                            "",
                            "    transaction.onerror = function(e) {",
                            "        db.close();",
                            "        if (operation.process(operation.getAction(), result) === false) {",
                            "            me.fireEvent('exception', me, operation);",
                            "        }",
                            "        operation.setException(e.target.result);",
                            "        if (typeof callback == 'function') {",
                            "            callback.call(scope || me, operation);",
                            "        }",
                            "    };",
                            "",
                            "    Ext.each(records, function(record) {",
                            "        var data = me.getRecordData(record),",
                            "            request = store.add(data),",
                            "            id = record.getId();",
                            "",
                            "        request.onerror = function(e) {",
                            "            executed++;",
                            "",
                            "            errors.push({",
                            "                clientId: id,",
                            "                error: e.target.result",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                operation.setException(errors);",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "        request.onsuccess = function(e) {",
                            "            executed++;",
                            "",
                            "            createdRecords.push({",
                            "                clientId: id,",
                            "                id: uniqueIdStrategy ? id : e.target.result,",
                            "                data: data,",
                            "                node: data",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                if (errors.length > 0) {",
                            "                    operation.setException(errors);",
                            "                }",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "    });",
                            "};",
                            "",
                            "var oRequest = indexedDB.open(me.getDatabaseName());",
                            "oRequest.onsuccess = onSuccess;"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "create",
                    "designerId": "fda244f3-1480-4e79-901c-054df884057f"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "operation",
                            "callback",
                            "scope"
                        ],
                        "fn": "read",
                        "implHandler": [
                            "    /**",
                            "     * read override",
                            "     */",
                            "var me = this,",
                            "    model = me.getModel(),",
                            "    idProperty = model.getIdProperty(),",
                            "    params = operation.getParams() || {},",
                            "    id = params[idProperty],",
                            "    sorters = operation.getSorters(),",
                            "    filters = operation.getFilters(),",
                            "    page = operation.getPage(),",
                            "    start = operation.getStart(),",
                            "    limit = operation.getLimit(),",
                            "    records = [],",
                            "    count = 0,",
                            "    filtered, i, ln, transaction, store, cursor, result;",
                            "",
                            "if (!me.checkObjectStoreExists(me.read, arguments)) {",
                            "    return;",
                            "}",
                            "",
                            "var onSuccess = function(e) {",
                            "    var db = e.target.result;",
                            "",
                            "    operation.setStarted();",
                            "",
                            "    transaction = db.transaction([me.getObjectStoreName()], \"readonly\");",
                            "    store = transaction.objectStore(me.getObjectStoreName());",
                            "",
                            "    result = new Ext.data.ResultSet({",
                            "        records: records,",
                            "        success: true",
                            "    });",
                            "",
                            "",
                            "    //TODO use indexes for valid filters?",
                            "    cursor = store.openCursor();",
                            "",
                            "    cursor.onsuccess = function(e) {",
                            "        var c = e.target.result,",
                            "            data = {};",
                            "",
                            "        if (c === null) {",
                            "            db.close();",
                            "            result.setSuccess(true);",
                            "            result.setTotal(count);",
                            "            result.setCount(count);",
                            "",
                            "            if (operation.process(operation.getAction(), result) === false) {",
                            "                me.fireEvent('exception', me, operation);",
                            "            }",
                            "",
                            "            if (filters && filters.length) {",
                            "                filtered = Ext.create('Ext.util.Collection', function(record) {",
                            "                    return record.getId();",
                            "                });",
                            "                filtered.setFilterRoot('data');",
                            "                for (i = 0, ln = filters.length; i < ln; i++) {",
                            "                    filtered.addFilter(filters[i]);",
                            "                }",
                            "                filtered.addAll(operation.getRecords());",
                            "",
                            "                operation.setRecords(filtered.items.slice());",
                            "                resultSet.setRecords(operation.getRecords());",
                            "                resultSet.setCount(filtered.items.length);",
                            "                resultSet.setTotal(filtered.items.length);",
                            "            }",
                            "",
                            "            if (typeof callback == 'function') {",
                            "                callback.call(scope || me, operation);",
                            "            }",
                            "            return;",
                            "        }",
                            "",
                            "        for (var f in c.value) {",
                            "            data[f] = c.value[f];",
                            "        }",
                            "        records.push({",
                            "            clientId: null,",
                            "            id: data[idProperty],",
                            "            data: data,",
                            "            node: data",
                            "        });",
                            "        count++;",
                            "        c['continue']();",
                            "    };",
                            "",
                            "    //TODO errors",
                            "    cursor.onerror = function(e) {",
                            "        //console.debug(e);",
                            "    };",
                            "",
                            "    transaction.onerror = function(e) {",
                            "        db.close();",
                            "        operation.setException(e.target.result);",
                            "        if (typeof callback == 'function') {",
                            "            callback.call(scope || me, operation);",
                            "        }",
                            "    };",
                            "};",
                            "",
                            "var oRequest = indexedDB.open(me.getDatabaseName());",
                            "oRequest.onsuccess = onSuccess;"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "read",
                    "designerId": "6b64179c-a613-4256-a9f6-8c837926da4a"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "operation",
                            "callback",
                            "scope"
                        ],
                        "fn": "update",
                        "implHandler": [
                            "   /**",
                            "     * update override",
                            "     */",
                            "var me = this,",
                            "    records = operation.getRecords(),",
                            "    errors = [],",
                            "    data = [],",
                            "    updatedRecords = [],",
                            "    executed = 0,",
                            "    totalRecords = records.length,",
                            "    result,",
                            "    transaction, store;",
                            "",
                            "if (!me.checkObjectStoreExists(me.update, arguments)) {",
                            "    return;",
                            "}",
                            "",
                            "var onSuccess = function(e) {",
                            "    var db = e.target.result;",
                            "",
                            "    operation.setStarted();",
                            "",
                            "    transaction = db.transaction([me.getObjectStoreName()], \"readwrite\");",
                            "    store = transaction.objectStore(me.getObjectStoreName());",
                            "",
                            "    result = new Ext.data.ResultSet({",
                            "        records: updatedRecords,",
                            "        success: true",
                            "    });",
                            "",
                            "    transaction.onerror = function(e) {",
                            "        if (operation.process(operation.getAction(), result) === false) {",
                            "            me.fireEvent('exception', me, operation);",
                            "        }",
                            "        operation.setException(e.target.result);",
                            "    };",
                            "",
                            "    Ext.each(records, function(record) {",
                            "        var data = me.getRecordData(record),",
                            "            request = store.put(data),",
                            "            id = record.getId();",
                            "",
                            "        request.onerror = function(e) {",
                            "            executed++;",
                            "",
                            "            errors.push({",
                            "                clientId: id,",
                            "                error: e.target.result",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                operation.setException(errors);",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "        request.onsuccess = function(e) {",
                            "            executed++;",
                            "",
                            "            updatedRecords.push({",
                            "                clientId: id,",
                            "                id: id,",
                            "                data: data,",
                            "                node: data",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                if (errors.length > 0) {",
                            "                    operation.setException(errors);",
                            "                }",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "    });",
                            "};",
                            "",
                            "var oRequest = indexedDB.open(me.getDatabaseName());",
                            "oRequest.onsuccess = onSuccess;"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "update",
                    "designerId": "47c749ab-1beb-4ca8-87f2-99198418a8ad"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "operation",
                            "callback",
                            "scope"
                        ],
                        "fn": "destroy",
                        "implHandler": [
                            "    /**",
                            "     * destroy override",
                            "     */",
                            "var me = this,",
                            "    records = operation.getRecords(),",
                            "    errors = [],",
                            "    data = [],",
                            "    destroyedRecords = [],",
                            "    executed = 0,",
                            "    totalRecords = records.length,",
                            "    result,",
                            "    uniqueIdStrategy = me.getUniqueIdStrategy(),",
                            "    transaction, store;",
                            "",
                            "if (!me.checkObjectStoreExists(me.destroy, arguments)) {",
                            "    return;",
                            "}",
                            "",
                            "var onSuccess = function(e) {",
                            "    var db = e.target.result;",
                            "",
                            "    operation.setStarted();",
                            "",
                            "    result = new Ext.data.ResultSet({",
                            "        records: destroyedRecords,",
                            "        success: true",
                            "    });",
                            "",
                            "    transaction = db.transaction([me.getObjectStoreName()], \"readwrite\");",
                            "    store = transaction.objectStore(me.getObjectStoreName());",
                            "",
                            "    transaction.onerror = function(e) {",
                            "        db.close();",
                            "        if (operation.process(operation.getAction(), result) === false) {",
                            "            me.fireEvent('exception', me, operation);",
                            "        }",
                            "        operation.setException(e.target.result);",
                            "        if (typeof callback == 'function') {",
                            "            callback.call(scope || me, operation);",
                            "        }",
                            "    };",
                            "",
                            "    Ext.each(records, function(record) {",
                            "        var id = record.getId();",
                            "        request = store['delete'](id);",
                            "",
                            "        request.onerror = function(e) {",
                            "            executed++;",
                            "",
                            "            errors.push({",
                            "                clientId: id,",
                            "                error: e.target.result",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                operation.setException(errors);",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "        request.onsuccess = function(e) {",
                            "            executed++;",
                            "",
                            "            destroyedRecords.push({",
                            "                clientId: id,",
                            "                id: id,",
                            "                data: data,",
                            "                node: data",
                            "            });",
                            "",
                            "            if (executed === totalRecords) {",
                            "                db.close();",
                            "                if (operation.process(operation.getAction(), result) === false) {",
                            "                    me.fireEvent('exception', me, operation);",
                            "                }",
                            "                if (errors.length > 0) {",
                            "                    operation.setException(errors);",
                            "                }",
                            "                if (typeof callback == 'function') {",
                            "                    callback.call(scope || me, operation);",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "    });",
                            "};",
                            "",
                            "var oRequest = indexedDB.open(me.getDatabaseName());",
                            "oRequest.onsuccess = onSuccess;"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "destroy",
                    "designerId": "7ab63448-77c0-4359-b0e1-33d40a5b53b3"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "designer|params": [
                            "record"
                        ],
                        "fn": "getRecordData",
                        "implHandler": [
                            "    /**",
                            "     * @private",
                            "     * Bundle model data up into an object to write to in IndexedDB Object Store.",
                            "     */",
                            "var me = this,",
                            "    fields = record.getFields(),",
                            "    idProperty = record.getIdProperty(),",
                            "    data = {},",
                            "    name, value;",
                            "",
                            "fields.each(function(field) {",
                            "    if (field.getPersist()) {",
                            "        name = field.getName();",
                            "        if (name === idProperty && !me.getUniqueIdStrategy()) {",
                            "            return;",
                            "        }",
                            "        value = record.get(name);",
                            "        data[name] = value;",
                            "    }",
                            "}, me);",
                            "",
                            "return data;"
                        ]
                    },
                    "configAlternates": {
                        "designer|params": "typedarray",
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "getRecordData",
                    "designerId": "7d176d65-2b8d-4467-826c-7f5097119fb3"
                },
                {
                    "type": "basicfunction",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "fn": "init_TODO",
                        "implHandler": [
                            "// todo - source- https://fiddle.sencha.com/#view/editor&fiddle/1tpo",
                            "",
                            "this.config = {",
                            "        /**",
                            "         * The Database Name",
                            "         */",
                            "        databaseName: null,",
                            "",
                            "        /**",
                            "         * The IndexedDB Object Store name. Defaults to the Model's name if not set",
                            "         */",
                            "        objectStoreName: null,",
                            "",
                            "        /**",
                            "         * private",
                            "         */",
                            "        uniqueIdStrategy: false,",
                            "",
                            "        /**",
                            "         * private",
                            "         */",
                            "        objectStoreExists: false",
                            "    };"
                        ]
                    },
                    "configAlternates": {
                        "fn": "string",
                        "implHandler": "code"
                    },
                    "name": "init_TODO",
                    "designerId": "68a269b1-106f-4a73-96be-ff137c3da53a"
                }
            ]
        }
    ]
}