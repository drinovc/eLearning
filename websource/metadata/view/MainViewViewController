{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "mainview",
        "designer|userClassName": "MainViewViewController"
    },
    "configAlternates": {
        "designer|userAlias": "string",
        "designer|userClassName": "string"
    },
    "designerId": "4611ed12-d628-4ff4-91cd-baa29154d036",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "load",
                "implHandler": [
                    "opts = Ext.applyIf(opts || {}, {",
                    "    program: null",
                    "});",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "refs.panelHeader.setTitle(opts.program.get('name'));"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "load",
            "designerId": "f5968103-06e3-45db-a38d-81d61a9431a8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newSection",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides');",
                    "",
                    "var data = {",
                    "    id: createGUID(),",
                    "    sequence: null,",
                    "    title: 'New Section',",
                    "    content: null,",
                    "    expanded: true,",
                    "    children: []",
                    "};",
                    "",
                    "var parentNode = /*refs.treeSlides.getSelection()[0] ||*/ store.getRoot();",
                    "",
                    "slide = parentNode.appendChild(data);",
                    "refs.treeSlides.setSelection(slide);",
                    "",
                    "//me.saveSlideState(slide);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "newSection",
            "designerId": "c55f916c-ddb4-4738-9181-b9564d04f730"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    parentNode = refs.treeSlides.getSelection()[0] || store.getRoot(),",
                    "    slide,",
                    "    data = {",
                    "        id: createGUID(),",
                    "        // sequence: sequence,",
                    "        title: 'New Slide', // + sequence,",
                    "        content: null,",
                    "        expanded: true,",
                    "        leaf: true",
                    "    };",
                    "",
                    "if(parentNode.isLeaf()) {",
                    "    parentNode = parentNode.parentNode;",
                    "}",
                    "",
                    "slide = parentNode.appendChild(data);",
                    "refs.treeSlides.setSelection(slide);",
                    "",
                    "me.saveSlideState(slide);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "newSlide",
            "designerId": "9bd4ab8a-4b3b-4e93-bd4e-7d11d203dbb5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slide"
                ],
                "fn": "deleteSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides');",
                    "",
                    "slide = slide || me.getCurrentSlide();",
                    "",
                    "if(slide) {",
                    "    var nextSlideIdx = store.indexOf(slide) - 1,",
                    "        nextSlide = store.getAt(nextSlideIdx >= 0 ? nextSlideIdx : 1),",
                    "        components = (Ext.decode(slide.get('content') || '{}').components);",
                    "",
                    "    if(components && components.length > 0) {",
                    "        Ext.Msg.confirm('Delete slide', 'Are you sure?', function(btn) {",
                    "            if(btn == 'yes') {",
                    "                store.remove(slide);",
                    "                me.clearSlidePanel();",
                    "                refs.treeSlides.setSelection(nextSlide);",
                    "            }",
                    "        });",
                    "    }",
                    "    else {",
                    "        store.remove(slide);",
                    "        me.clearSlidePanel();",
                    "        refs.treeSlides.setSelection(nextSlide);",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteSlide",
            "designerId": "82182a64-15d7-490c-8f9a-7883a595b871"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCurrentSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "return refs.treeSlides.getSelection()[0];"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCurrentSlide",
            "designerId": "1deb763b-13ce-4bb9-93bf-efa1c852c251"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nextSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    slide = me.getCurrentSlide(),",
                    "    nextSlideIdx = store.indexOf(slide) + 1,",
                    "    nextSlide = store.getAt(nextSlideIdx);",
                    "",
                    "if(nextSlide) {",
                    "    refs.treeSlides.setSelection(nextSlide);",
                    "}"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "nextSlide",
            "designerId": "60b9c522-bf54-45af-b1b0-557ee9adae74"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "prevSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    slide = me.getCurrentSlide(),",
                    "    nextSlideIdx = store.indexOf(slide) - 1,",
                    "    nextSlide = store.getAt(nextSlideIdx);",
                    "",
                    "if(nextSlide) {",
                    "    refs.treeSlides.setSelection(nextSlide);",
                    "}"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "prevSlide",
            "designerId": "f834b7e3-63c8-479f-a995-55bdbac8e041"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "src"
                ],
                "fn": "setBackground",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "me._pageSetup.background = src;",
                    "",
                    "if(src) {",
                    "    Ext.getCmp('panelContent').setStyle('background', 'url(' + src + ')');",
                    "}",
                    "else {",
                    "    Ext.getCmp('panelContent').setStyle('background', null);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setBackground",
            "designerId": "476e4a6a-5cf9-4c21-adf3-90537fa42a9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "preview"
                ],
                "fn": "togglePreview",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "refs.panelMenu.setVisible(!preview);",
                    "refs.toolbarEdit.setVisible(!preview);",
                    "refs.toolbarPreview.setVisible(!!preview);",
                    "refs.panelContent[preview ? 'removeCls' : 'addCls']('edit');",
                    "refs.panelContent[preview ? 'addCls' : 'removeCls']('preview');",
                    "",
                    "refs.panelSlide.setMargin(preview ? '10' : '10 10 10 0');",
                    "",
                    "if(preview) {",
                    "    me.saveSlideState(me.getCurrentSlide());",
                    "    refs.treeSlides.setSelection(refs.treeSlides.store.getAt(0));",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "togglePreview",
            "designerId": "58f12ae8-47bd-4d54-acc1-a648385b17ab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getFreePosition",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    snap = me._pageSetup.snap,",
                    "    pos = {",
                    "        x: snap*2,",
                    "        y: snap*2,",
                    "        width: me.round(refs.panelContent.el.getWidth() - 2*snap*2),",
                    "        height: snap*2",
                    "    };",
                    "",
                    "Ext.each(refs.panelContent.el.query('.html-component'), function(component) {",
                    "    pos.y = me.round(Math.max(pos.y, component.y + component.height + snap));",
                    "});",
                    "",
                    "return pos;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getFreePosition",
            "designerId": "36cd9f6f-db1e-46d4-b02d-f497d2fb3ad3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSlideComponents",
                "implHandler": [
                    "return this.getReferences().panelContent.el.query('.html-component');"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getSlideComponents",
            "designerId": "8d55f6ff-5854-4d26-a233-3bf13ec351ec"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCurrentState",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    slides = Ext.clone(Ext.pluck(refs.treeSlides.store.getRange(), 'data')).map(function(node) { return cleanTreeNodeData(node); });",
                    "    data = {",
                    "        slides: slides,",
                    "        pageSetup: me._pageSetup",
                    "    };",
                    "",
                    "return data;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCurrentState",
            "designerId": "02450dc0-5cb5-4c97-ae26-d68f110b7eab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slide"
                ],
                "fn": "saveSlideState",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    content = {",
                    "        components: []",
                    "    };",
                    "",
                    "slide = slide || me.getCurrentSlide();",
                    "",
                    "if(slide) {",
                    "",
                    "    Ext.each(me.getSlideComponents(), function(component) {",
                    "        content.components.push(component._opts);",
                    "    });",
                    "",
                    "    slide.set('content', Ext.encode(content));",
                    "",
                    "    // save state to offline storage - switch to indexdb at some point?",
                    "    localStorage.setItem('mxp_elearning_slide', Ext.encode(me.getCurrentState()));",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveSlideState",
            "designerId": "8676e14d-874e-4d0c-9266-74ae11a54e22"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slide"
                ],
                "fn": "loadSlideState",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    parentEl = refs.panelContent.el.down('#html-slide');",
                    "",
                    "me.clearSlidePanel();",
                    "",
                    "if(slide) {",
                    "    var content = Ext.decode(slide.get('content') || '{}');",
                    "",
                    "    Ext.each(content.components, function(component) {",
                    "        this.insertComponent(component);",
                    "    }, this);",
                    "",
                    "    me._selectedComponent = null;",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadSlideState",
            "designerId": "339747a2-bc5e-45c9-9584-d767adecee0f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "clearSlidePanel",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    parentEl = refs.panelContent.el.down('#html-slide');",
                    "",
                    "me.hideComponentTools();",
                    "",
                    "Ext.each(parentEl.query('.html-component'), function(component) {",
                    "    parentEl.removeChild(component);",
                    "}, this);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearSlidePanel",
            "designerId": "a1f0ebf3-2c0d-4188-a3a0-bda6aeaac392"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "item"
                ],
                "fn": "addComponentListeners",
                "implHandler": [
                    "var me = this,",
                    "",
                    "item = Ext.get(item);",
                    "",
                    "item.on('click', function(e, t) {",
                    "    if(me._selectedComponent) {",
                    "        me._selectedComponent.removeCls('selected');",
                    "        if(me._tools) {",
                    "            me._tools = null;",
                    "        }",
                    "    }",
                    "    me._selectedComponent = item;",
                    "    me._selectedComponent.addCls('selected');",
                    "    me.showComponentTools(item);",
                    "});",
                    "",
                    "item.on('dblclick', function(e, t) {",
                    "    me.editComponent(item);",
                    "});",
                    "",
                    "item.on('_edit', function(e, t) {",
                    "    me.editComponent(item);",
                    "});",
                    "",
                    "item.on('_duplicate', function(e, t) {",
                    "    me.duplicateComponent(item);",
                    "});",
                    "",
                    "item.on('_delete', function(e, t) {",
                    "    me.deleteComponent(item);",
                    "    me.hideComponentTools(item);",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addComponentListeners",
            "designerId": "d3646912-8692-4f65-befb-a506f6ce48a3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "showComponentTools",
                "implHandler": [
                    "var me = this;",
                    "",
                    "if(!me._componentTools) {",
                    "    me._componentTools = me.getView().add({ xtype: 'edittools' });",
                    "}",
                    "me._componentTools.getController().show({ component: component });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showComponentTools",
            "designerId": "4ce18fa7-c7d5-4c16-a98e-e033445f46b4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "hideComponentTools",
                "implHandler": [
                    "var me = this;",
                    "",
                    "if(!me._componentTools) {",
                    "    me._componentTools = me.getView().add({ xtype: 'edittools' });",
                    "}",
                    "me._componentTools.close();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "hideComponentTools",
            "designerId": "3b30e3b6-e512-469a-8ed3-ad1a2ec5bc90"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "insertComponent",
                "implHandler": [
                    "opts = Ext.applyIf(opts || {}, {",
                    "    type: null,",
                    "    height: null,",
                    "    width: null,",
                    "    x: null,",
                    "    y: null,",
                    "    html: '',",
                    "    options: [],",
                    "    multi: false,",
                    "    src: '',",
                    "    cls: null,",
                    "    style: null",
                    "});",
                    "",
                    "if(!opts.type) {",
                    "    Ext.Msg.alert('Error', 'No component type');",
                    "}",
                    "",
                    "if(opts.cls && typeof opts.cls == \"string\") {",
                    "    opts.cls = [opts.cls];",
                    "}",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    pos = me.getFreePosition(),",
                    "    snap = me._pageSetup.snap,",
                    "    parentEl = refs.panelContent.el.down('#html-slide'),",
                    "    cmp = document.createElement('div');",
                    "",
                    "if(!me.getCurrentSlide()) {",
                    "    me.newSlide();",
                    "}",
                    "",
                    "// set size",
                    "// if(opts.type == 'image' && opts.src) {",
                    "//     // determine image size",
                    "//     var img = new Image();",
                    "",
                    "//     img.onload = function() {",
                    "//         cmp.width = me.round(isNull(opts.width, img.width));",
                    "//         cmp.height = me.round(isNull(opts.height, img.height));",
                    "//         cmp.style.width = cmp.width + 'px';",
                    "//         cmp.style.height = cmp.height + 'px';",
                    "//     };",
                    "//     img.src = opts.src;",
                    "",
                    "//     // show image as background",
                    "//      cmp.style.backgroundImage = 'url(' + opts.src + ')';",
                    "// }",
                    "// else {",
                    "    cmp.width = opts.width = me.round(isNull(opts.width, pos.width));",
                    "    cmp.height = opts.height = me.round(isNull(opts.height, pos.height));",
                    "    cmp.style.width = cmp.width + 'px';",
                    "    cmp.style.height = cmp.height + 'px';",
                    "// }",
                    "",
                    "// set classes",
                    "cmp.classList.add('html-component');",
                    "",
                    "// set position",
                    "cmp.x = opts.x = isNull(opts.x, pos.x);",
                    "cmp.y = opts.y = isNull(opts.y, pos.y);",
                    "",
                    "cmp.style.left = cmp.x + 'px';",
                    "cmp.style.top = cmp.y + 'px';",
                    "",
                    "// set content",
                    "var content = document.createElement('div');",
                    "var html = opts.html;",
                    "",
                    "content.classList.add('html-content');",
                    "Ext.each(opts.cls, function(cls) { content.classList.add(cls); });",
                    "",
                    "if(opts.type == me.cmpTypes.SELECTION && opts.options) {",
                    "    html = '<div clas=\"text\">' + html + '</div>';",
                    "",
                    "    Ext.each(opts.options, function(option) {",
                    "        var cls = ['option', (opts.multi ? 'check' : 'radio')];",
                    "",
                    "        if(option.correct) {",
                    "            cls.push('correct');",
                    "        }",
                    "        html += '<div class=\"' + cls.join(' ') + '\">' + option.text + '</div>';",
                    "    });",
                    "}",
                    "",
                    "if(opts.type == me.cmpTypes.IMAGE && opts.src) {",
                    "    content.style.backgroundImage = 'url(' + opts.src + ')';",
                    "}",
                    "",
                    "content.innerHTML = html;",
                    "content = cmp.appendChild(content);",
                    "",
                    "cmp = parentEl.dom.appendChild(cmp);",
                    "",
                    "cmp._opts = opts;",
                    "cmp.type = opts.type;",
                    "Ext.get(cmp)._opts = opts;",
                    "Ext.get(cmp).type = opts.type;",
                    "",
                    "cmp._dragger = new Ext.drag.Source({",
                    "    element: Ext.get(cmp),",
                    "    constrain: {",
                    "        element: parentEl,",
                    "        snap: {",
                    "            x: snap,",
                    "            y: snap",
                    "        },",
                    "    },",
                    "    listeners: {",
                    "        beforedragstart: function(component, info, event, eOpts) {",
                    "            if(info.eventTarget.classList.contains('x-resizable-handle')) {",
                    "                return false;",
                    "            }",
                    "        },",
                    "        dragcancel: function(component, info, event, eOpts) {",
                    "            console.log('dragcancel', arguments);",
                    "        },",
                    "        dragend: function(component, info, event, eOpts) {",
                    "            console.log('dragend', arguments);",
                    "        },",
                    "        dragmove: function(component, info, event, eOpts) {",
                    "            var pos = info.element.current,",
                    "                x = pos.x - parentEl.getX(),",
                    "                y = pos.y - parentEl.getY();",
                    "",
                    "            cmp._opts.x = x;",
                    "            cmp._opts.y = y;",
                    "//             console.log(Ext.String.format('dragmove X: {0}, Y: {1}', x, y));",
                    "        },",
                    "        dragstart: function(component, info, event, eOpts) {",
                    "            console.log('dragstart', arguments);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "cmp._resizer = Ext.create('Ext.create', 'Ext.resizer.Resizer', {",
                    "    target: Ext.get(cmp),",
                    "    //pinned:true,",
                    "    minWidth: snap,",
                    "    minHeight: snap,",
                    "    heightIncrement: snap,",
                    "    widthIncrement: snap,",
                    "    preserveRatio: false,",
                    "    dynamic:true,",
                    "    transparent: false,",
                    "    handles: 'all', // shorthand for 'n s e w ne nw se sw'",
                    "    listeners: {",
                    "        resize: function(component, width, height, e, eOpts) {",
                    "            cmp.width = width;",
                    "            cmp.height = height;",
                    "",
                    "            cmp._opts.width = width;",
                    "            cmp._opts.height = height;",
                    "//             console.log(Ext.String.format('W: {0}, H: {1}', width, height));",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "me.addComponentListeners(cmp);",
                    "me.saveSlideState();",
                    "",
                    "return Ext.get(cmp);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertComponent",
            "designerId": "23db492c-9a35-4905-b307-50cd813d7b16"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "editComponent",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "component = component || me._selectedComponent;",
                    "",
                    "if(component) {",
                    "    if(component.type == me.cmpTypes.SELECTION) {",
                    "        me.editSelection(component);",
                    "    }",
                    "    else {",
                    "        var wnd = me.getView().add({",
                    "            xtype: 'texteditor'",
                    "        });",
                    "",
                    "        wnd.getController().show({",
                    "            value: component.el.down('.html-content').dom.innerHTML,",
                    "            callback: function(value) {",
                    "                component.el.down('.html-content').dom.innerHTML = value;",
                    "                component._opts.html = value;",
                    "                me.saveSlideState();",
                    "            },",
                    "            scope: me",
                    "        });",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editComponent",
            "designerId": "b64b3a4a-123c-4645-b395-e9996fcfec5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "duplicateComponent",
                "implHandler": [
                    "var opts = Ext.clone(component._opts);",
                    "",
                    "delete opts.x;",
                    "delete opts.y;",
                    "",
                    "var cmp = this.insertComponent(opts);",
                    "",
                    "cmp.fireEvent('click');"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "duplicateComponent",
            "designerId": "a0b53224-f010-4e9b-a933-3fc0a49be5f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "deleteComponent",
                "implHandler": [
                    "var me = this,",
                    "    refs = this.getReferences();",
                    "",
                    "component = component || me._selectedComponent;",
                    "",
                    "if(component) {",
                    "    me._selectedComponent.destroy();",
                    "    me._selectedComponent = null;",
                    "    me.saveSlideState();",
                    "}"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "deleteComponent",
            "designerId": "9486e375-6af4-4efb-8028-4a6cd92db917"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "insertTitle",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        type: me.cmpTypes.TITLE,",
                    "        cls: 'title',",
                    "        html: value || 'Title',",
                    "        height: 50",
                    "    });",
                    "",
                    "// me.editComponent(cmp);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "insertTitle",
            "designerId": "f72da6be-83e0-4a06-9ce6-4759c97acf8c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "insertText",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        type: me.cmpTypes.TEXT,",
                    "        cls: 'text',",
                    "        html: value || 'Text',",
                    "        height: 425",
                    "    });",
                    "",
                    "// me.editComponent(cmp);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "insertText",
            "designerId": "04cc2175-1969-4641-94b3-5f9e6402fe44"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "insertImage",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        type: me.cmpTypes.IMAGE,",
                    "        cls: 'image',",
                    "        html: '',",
                    "        src: 'resources/images/example.jpg',",
                    "        height: 275,",
                    "    });"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertImage",
            "designerId": "843bf86f-13d2-425b-a683-c4bdd4b227e3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "insertSelection",
                "implHandler": [
                    "this.editSelection(null, opts);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertSelection",
            "designerId": "a77caf07-026f-417f-84d4-46e60b6f0194"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "opts"
                ],
                "fn": "editSelection",
                "implHandler": [
                    "opts = Ext.applyIf(opts || {}, {",
                    "    multi: false",
                    "});",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    state = component && component._opts,",
                    "    multi = state && state.multi || opts.multi,",
                    "    wnd = me.getView().add({ xtype: 'selectioneditor' });",
                    "",
                    "wnd.getController().show({",
                    "    text: state && state.html,",
                    "    options: state && state.options,",
                    "    multi: multi,",
                    "    callback: function(text, answers) {",
                    "",
                    "        if(answers.length === 0) {",
                    "            return 'Please specify at least one answer';",
                    "        }",
                    "        if(answers.filter(function(item) { return item.correct; }).length === 0) {",
                    "            return 'Please mark at least one answer as correct';",
                    "        }",
                    "        if(!multi && answers.filter(function(item) { return item.correct; }).length > 1) {",
                    "            return 'Only one correct answer is allowed for single selection';",
                    "        }",
                    "",
                    "        if(component) {",
                    "            var state = component._opts;",
                    "",
                    "            me.deleteComponent(component);",
                    "            state.html = text;",
                    "            state.options = answers;",
                    "",
                    "            component = me.insertComponent(state);",
                    "        }",
                    "        else {",
                    "            component = me.insertComponent({",
                    "                type: me.cmpTypes.SELECTION,",
                    "                cls: 'selection',",
                    "                html: text,",
                    "                options: answers,",
                    "                multi: multi,",
                    "                height: 100",
                    "            });",
                    "        }",
                    "",
                    "    },",
                    "    scope: me",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editSelection",
            "designerId": "8e42a451-708f-431d-a041-a958e1b3e416"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "round",
                "implHandler": [
                    "var snap = this._pageSetup.snap;",
                    "",
                    "return Math.round(value / snap) * snap;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "round",
            "designerId": "c7c30285-30ba-4e96-a29e-bc8c0a3841d7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ceil",
                "implHandler": [
                    "var snap = this._pageSetup.snap;",
                    "",
                    "return Math.ceil(value / snap) * snap;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "ceil",
            "designerId": "7c4331e9-e1db-47ca-ac99-000d97f6fb90"
        }
    ]
}