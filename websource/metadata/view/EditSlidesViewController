{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "editslides",
        "designer|userClassName": "EditSlidesViewController"
    },
    "configAlternates": {
        "designer|userAlias": "string",
        "designer|userClassName": "string"
    },
    "designerId": "2b4061c2-eb58-419f-b864-9ad1d450e59a",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "load",
                "implHandler": [
                    "var me = this,",
                    "\trefs = me.getReferences();",
                    "",
                    "opts = Ext.applyIf(opts || {}, {",
                    "\tprogram: null,",
                    "\tperson: {PERSON_ID: -1}",
                    "});",
                    "",
                    "me.person = opts.person;",
                    "me.personId = opts.person.PERSON_ID;",
                    "",
                    "if(me.personId == -1){",
                    "\tconsole.warn(\"Using mockup test person id\");",
                    "}",
                    "",
                    "",
                    "me.programData = opts.program.data; // create variable of this program that can be accessed from anywhere in this controller",
                    "me.programId = opts.program.id; //",
                    "",
                    "refs.panelHeader.setTitle(me.programData.name);",
                    "",
                    "// clear old panel if there is no slides on this program yet, so content from previous program doesn't remain on this one",
                    "this.clearSlidePanel();",
                    "me.allComponents = []; // clear old components - this array is used to store all ext components of this slide",
                    "me._selectedComponents = [];",
                    "me.clean(true);",
                    "",
                    "// call sync state here and not save state, as we dont have anything to save yet",
                    "var me = this,",
                    "\tlocalStorageData = Ext.decode(localStorage.getItem('mxp_elearning')),",
                    "\ttreeStoreSlides = me.getStore('TreeStoreSlides'),",
                    "\tquestionsStoreSlides = me.getStore('QuestionsStoreSlides'),",
                    "\tpersonAnswersStore = me.getStore('PersonAnswers'),",
                    "\tbtnPreview = Ext.getCmp('btnPreview');",
                    "",
                    "// init subfolders it they are not yet",
                    "if(!localStorageData[me.programId].slides){localStorageData[me.programId].slides = {};}",
                    "if(!localStorageData[me.programId].questions){localStorageData[me.programId].questions = {};}",
                    "if(!localStorageData[me.programId].answers){localStorageData[me.programId].answers = {};}",
                    "localStorageData[me.programId].pageSetup = Ext.applyIf(localStorageData[me.programId].pageSetup, me._pageSetup );",
                    "//if(!localStorageData[me.programId].pageSetup){localSorageData[me.programId].pageSetup = me._pageSetup;}",
                    "",
                    "localStorage.setItem('mxp_elearning', Ext.encode(localStorageData)); // initializes localstorage if it is empty, otherwise overwrites it with same content",
                    "",
                    "",
                    "// loaded latest person program so we can see if we can resume current program - color button to indicate that personProgram is still active",
                    "",
                    "var me = this,",
                    "\trefs = me.getReferences(),",
                    "\tpersonProgramsStore = me.getStore('PersonPrograms'),",
                    "\tpersonAnswersStore = me.getStore('PersonAnswers');",
                    "",
                    "// reset button to default",
                    "var btnPreview = Ext.getCmp('btnPreview');",
                    "btnPreview.removeCls('active-program');",
                    "btnPreview.setText('Preview');",
                    "",
                    "if(me.programData.validTo < new Date()){",
                    "\tExt.toast(\"Program is not valid anymore!\");",
                    "\tbtnPreview.setText('Program Not Valid');",
                    "\treturn;",
                    "}",
                    "",
                    "if (navigator.onLine){",
                    "\tvar syncAnswersCallback = function(){",
                    "\t\tme.setInitialSlide();",
                    "",
                    "",
                    "\t\t// this code below is causing sections to resync with server - in order to correctly append children to them and show folder icons",
                    "\t\tvar treeStoreSlides = me.getStore(\"TreeStoreSlides\");",
                    "\t\tfor(var i = 0; i < treeStoreSlides.data.items.length;i++){",
                    "\t\t\tvar entry = treeStoreSlides.data.items[i];",
                    "\t\t\tif(entry.data.categoryId == App.ProgramPageCategoriesEnum.Chapter){",
                    "\t\t\t\tentry.phantom = true;",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tme.saveState(); // save ALL data that is after all initial data syncs to localstorage",
                    "\t\t// set initial data",
                    "",
                    "\t};",
                    "",
                    "\tpersonProgramsStore.load({",
                    "\t\tparams:{",
                    "\t\t\tpersonId: me.personId,",
                    "\t\t\tprogramId: me.programId",
                    "\t\t},",
                    "\t\tcallback:function(record){",
                    "\t\t\tif(record && record.length > 0){",
                    "\t\t\t\tme.currentPersonProgram = record[0].data;",
                    "\t\t\t\tif(me.currentPersonProgram.attempt >= me.programData.maxAttemptsTrainingMode + me.programData.maxAttemptsScoreMode){",
                    "\t\t\t\t\t// Cannot attempt any more tries... returning",
                    "",
                    "\t\t\t\t\tbtnPreview.setText('Preview (No More Attempts)');",
                    "\t\t\t\t\tbtnPreview.disable();",
                    "\t\t\t\t\t//return;",
                    "\t\t\t\t}",
                    "\t\t\t\t// here we can read the records id to use in posting answers",
                    "\t\t\t\t// add completion time minutes to initial programStarted time",
                    "\t\t\t\tvar endTime = new Date(new Date(me.currentPersonProgram.programStarted).getTime() +",
                    "\t\t\t\t\t\t\t\t\t   me.programData.completionTime * 60000); // completion time in database is in minutes",
                    "\t\t\t\tvar remainingMS = endTime.getTime() - new Date().getTime();",
                    "\t\t\t\tif(remainingMS > 0 && (me.currentPersonProgram.programStatusId == App.ProgramStatuses[\"In Progress\"] ||",
                    "\t\t\t\t\t\t\t\t\t   me.currentPersonProgram.programStatusId == App.ProgramStatuses.Repeat)){",
                    "\t\t\t\t\tbtnPreview.addCls('active-program');",
                    "\t\t\t\t\tbtnPreview.setText('Preview (Resume)');",
                    "",
                    "\t\t\t\t\tme.startPreviewTimer(); // start timer so active-program style gets automatically removed on timeout",
                    "",
                    "\t\t\t\t}",
                    "",
                    "",
                    "",
                    "\t\t\t}",
                    "\t\t\tme.serverSync(syncAnswersCallback);",
                    "\t\t}",
                    "\t});",
                    "}else{",
                    "\t// set localstorage data to tree store",
                    "\tlocalStorageData = localStorageData[me.programId];",
                    "",
                    "\tvar slidesDictToArray = [];",
                    "\tfor(var key in localStorageData.slides){",
                    "\t\tslidesDictToArray.push(localStorageData.slides[key]);",
                    "\t}",
                    "\ttreeStoreSlides.getRootNode().appendChild(slidesDictToArray);",
                    "",
                    "\t//treeStoreSlides.setData(localStorageData.slides); // dont use set data",
                    "\t//treeStoreSlides.getRootNode().appendChild(localStorageData.slides); // also dont use append child with dict but with array",
                    "",
                    "\tquestionsStoreSlides.setData(localStorageData.questions);",
                    "\tpersonAnswersStore.setData(localStorageData.answers);",
                    "\tif(localStorageData.pageSetup){",
                    "\t\tme._pageSetup = localStorageData.pageSetup;",
                    "\t}",
                    "",
                    "\t// set initial data",
                    "\tme.setInitialSlide();",
                    "",
                    "\tme.saveState();",
                    "",
                    "",
                    "}",
                    "",
                    "",
                    "// Update the online status icon based on connectivity",
                    "window.addEventListener('online',  me.connectionChange);",
                    "window.addEventListener('offline', me.connectionChange);",
                    "",
                    "",
                    "refs.panelContent.removeAll();",
                    "refs.toolbarPreview.hide();",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "load",
            "designerId": "3a109293-4c40-4ae9-b70b-a9e4862c5a6d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newSection",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "\tnow = new Date(),",
                    "\tparentNode = /*refs.treeSlides.getSelection()[0] ||*/ store.getRoot(),",
                    "\tdata = {",
                    "\t\tid: createGUID(),",
                    "\t\tprogramId: me.programId,",
                    "\t\ttitle: 'New Section',",
                    "\t\tcontent: null,",
                    "\t\texpanded: false,",
                    "\t\tchildren: [],",
                    "\t\tcategoryId : App.ProgramPageCategoriesEnum.Chapter,",
                    "\t\tscoreMethod: 'A',",
                    "\t\tsequence: 1234,",
                    "\t\tlastChanged: now,",
                    "\t\tcreated: now",
                    "\t};",
                    "",
                    "slide = parentNode.appendChild(data);",
                    "refs.treeSlides.setSelection(slide);",
                    "//save state needs to be after set selection",
                    "me.saveState();",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "newSection",
            "designerId": "38a76c16-9fd4-47cd-a852-2c0c3a0d563b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    parentNode = me.getCurrentSlide() || store.getRoot(),",
                    "    slide,",
                    "\tnow = new Date();",
                    "    data = {",
                    "        id: createGUID(),",
                    "        programId: me.programId,",
                    "        sequence: me.getNumSlides(), // todo - this sequence might not be correct to write in database",
                    "        title: 'New Page ' + (me.getNumSlides() + 1),",
                    "        content: null,",
                    "        expanded: true,",
                    "        leaf: true,",
                    "        isSlide : true,",
                    "        categoryId : App.ProgramPageCategoriesEnum.Page,",
                    "        scoreMethod: 'A',",
                    "\t\tlastChanged: now,",
                    "\t\tcreated: now",
                    "",
                    "    };",
                    "",
                    "// check if we are adding to chapter - if we are - expand it - this may not be needed for sections because they are only added to root",
                    "if(parentNode.data.categoryId == App.ProgramPageCategoriesEnum.Chapter){",
                    "\tparentNode.data.expanded=true; // expand this node that we are going to paste this new section in",
                    "}",
                    "",
                    "if(parentNode.isLeaf()) {",
                    "    parentNode = parentNode.parentNode;",
                    "}",
                    "",
                    "slide = parentNode.appendChild(data);",
                    "me.saveState();",
                    "refs.treeSlides.setSelection(slide);",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "newSlide",
            "designerId": "e32a7673-ef8a-4a0e-ba19-619cae353298"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slide"
                ],
                "fn": "deleteSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "\tdeleteSlideWithContent= function(slide, treeStoreSlides, questionsStore) {",
                    "\t\t// first decend down the tree to leaf",
                    "\t\tif(slide.childNodes && slide.childNodes.length > 0){",
                    "\t\t\tfor(var i = 0; i < slide.childNodes.length; i++){",
                    "\t\t\t\tdeleteSlideWithContent(slide.childNodes[i], treeStoreSlides, questionsStore);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\t// then delete my data and delete me",
                    "\t\t// go through its components, check if its a question, then delete that question",
                    "\t\tvar components = (Ext.decode(slide.get('content') || '{}').components);",
                    "\t\tif(components && Object.keys(components).length > 0){",
                    "\t\t\tfor (var key in components){",
                    "\t\t\t\tvar cmp = components[key];",
                    "",
                    "\t\t\t\tvar cmpType = cmp.type;",
                    "\t\t\t\tif (cmpType == me.cmpTypes.SELECTION || cmpType == \"Single selection\" || cmpType == \"Multi selection\") {",
                    "\t\t\t\t\t// update store of that question component",
                    "\t\t\t\t\tvar rec = questionsStore.findRecord('id', cmp.id);",
                    "\t\t\t\t\tquestionsStore.remove(rec);",
                    "",
                    "\t\t\t\t}",
                    "\t\t\t\t// remove possible answers for this question from store",
                    "\t\t\t\tvar personAnswers = me.getStore('PersonAnswers');",
                    "\t\t\t\tvar answerRecord = personAnswers.findRecord('questionId', cmp.id);",
                    "\t\t\t\tif(answerRecord){",
                    "\t\t\t\t\tpersonAnswers.remove(answerRecord);",
                    "\t\t\t\t\tpersonAnswers.sync();",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t}",
                    "\t\t// remove this slide from tree store",
                    "\t\tslide.parentNode.removeChild(slide);",
                    "",
                    "\t},",
                    "",
                    "\tdeleteWrapup = function(slide){",
                    "\t\tvar treeStoreSlides = me.getStore('TreeStoreSlides'),",
                    "\t\t\tquestionsStore = me.getStore('QuestionsStoreSlides');",
                    "\t\t// delete this slide with its subtree and conten of each slide in this tree",
                    "\t\tdeleteSlideWithContent(slide, treeStoreSlides, questionsStore);",
                    "",
                    "\t\t// set localstorage and sync with server if online",
                    "\t\tme.saveState();",
                    "\t\tme.clearSlidePanel();",
                    "\t\tme.nextSlide();",
                    "\t};",
                    "",
                    "slide = slide || me.getCurrentSlide();",
                    "",
                    "if(slide) {",
                    "    var components = (Ext.decode(slide.get('content') || '{}').components),",
                    "        childNodes = slide.childNodes; // child nodes are relevant if this section has any subpages",
                    "",
                    "    if((components && Object.keys(components).length > 0) || (childNodes && childNodes.length > 0)) {",
                    "        Ext.Msg.confirm( 'Delete slide', 'Are you sure?' +",
                    "                        ((childNodes && childNodes.length > 0)?",
                    "                         \" You will delete whole subtree!\": \"\"), function(btn) {",
                    "            if(btn == 'yes') {",
                    "\t\t\t\tdeleteWrapup(slide);",
                    "            }",
                    "        });",
                    "    }",
                    "    else {",
                    "\t\tdeleteWrapup(slide);",
                    "    }",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteSlide",
            "designerId": "33300d93-ac72-4d38-927b-db4ac63f130b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCurrentSlide",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),currentSlideIdx = store.indexOf(me.currentSlide);",
                    "",
                    "",
                    "me.currentSlide = refs.treeSlides.getSelection()[0] || store.getAt(currentSlideIdx) || store.first();",
                    "",
                    "return me.currentSlide;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCurrentSlide",
            "designerId": "24e57403-64fb-41f8-bd2a-9a198d0627ec"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slidesOnly = true"
                ],
                "fn": "nextSlide",
                "implHandler": [
                    "//slidesOnly -> variable to recursively descend to first slide - if its set to false, we also visit sections",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    slide = me.getCurrentSlide(),",
                    "    nextSlideIdx = store.indexOf(slide) + 1,",
                    "    nextSlide = store.getAt(nextSlideIdx);",
                    "",
                    "if(nextSlide) {",
                    "    refs.treeSlides.setSelection(nextSlide);",
                    "    if (nextSlide.data.leaf === false){",
                    "        me.nextSlide(slidesOnly);",
                    "        if(slidesOnly){",
                    "            // recursively iterate to leaf slide through section",
                    "            if (this.getNumSlides() === 0){",
                    "                //cannot switch recursively to next slide\", \"no slides exist",
                    "                return;",
                    "            }",
                    "            if (me.getCurrentSlide().data.leaf === false){",
                    "                me.prevSlide(slidesOnly);",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "nextSlide",
            "designerId": "0d0caea7-be3a-455b-8d67-be9a6795fbf2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slidesOnly = true"
                ],
                "fn": "prevSlide",
                "implHandler": [
                    "// slidesOnly -> variable to recursively ascend to first remaining slide - if its set to false, we also visit sections",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    store = me.getStore('TreeStoreSlides'),",
                    "    slide = me.getCurrentSlide(),",
                    "    prevSlideIdx = store.indexOf(slide) - 1,",
                    "    prevSlide = store.getAt(prevSlideIdx);",
                    "",
                    "",
                    "if(prevSlide) {",
                    "    refs.treeSlides.setSelection(prevSlide);",
                    "    if (prevSlide.data.leaf === false){",
                    "",
                    "        me.prevSlide(slidesOnly);",
                    "",
                    "        if(slidesOnly){",
                    "            // recursively iterate to leaf slide through section",
                    "            if (this.getNumSlides() === 0){",
                    "                //cannot switch recursively to prev slide\", \"no slides exist",
                    "                return;",
                    "            }",
                    "            if (me.getCurrentSlide().data.leaf === false){",
                    "                me.nextSlide(slidesOnly);",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "prevSlide",
            "designerId": "1e7865c4-3bf9-4485-9dcb-6fc8fd37d7c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "src",
                    "save = true"
                ],
                "fn": "setBackground",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "me._pageSetup.background = src;",
                    "",
                    "if(src) {",
                    "    Ext.getCmp('panelContent').setStyle('background', 'url(' + src + ')');",
                    "}",
                    "else {",
                    "    Ext.getCmp('panelContent').setStyle('background', null);",
                    "}",
                    "if(save){ // if we want to restore background we dont want to save it again",
                    "\tme.saveState();",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setBackground",
            "designerId": "c2dc4a53-5bcd-4cb5-86d7-e77e1bccd594"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "preview",
                    "yesCallback"
                ],
                "fn": "togglePreview",
                "implHandler": [
                    "// calls show preview or displays dialog option when closing preview - to directly close preview without dialog - call me.closePreview()",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "if(preview){",
                    "    me.showPreview();",
                    "",
                    "}else{",
                    "    Ext.Msg.confirm( 'Close preview', 'Are you sure?' + (navigator.onLine? '': ' Warning - Answers will not be submitted until you reconnect!'), function(btn) { // show confirm dialog",
                    "        if(btn == 'yes') {",
                    "            me.closePreview();",
                    "\t\t\tif(yesCallback){ yesCallback(); }",
                    "        } // else do nothing",
                    "    });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "togglePreview",
            "designerId": "afda5c45-be0f-4f17-88e9-9fcb15340d19"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getFreePosition",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    snap = me._pageSetup.snap,",
                    "    pos = {",
                    "        x: snap * 2,",
                    "        y: snap * 2,",
                    "        width: me.round(refs.panelContent.el.getWidth() - 2 * snap * 2),",
                    "        height: snap * 2",
                    "    }",
                    "\t",
                    "Ext.each(refs.panelContent.el.query('.html-component'), function(component) {",
                    "    pos.y = me.round(Math.max(pos.y, component.y + component.height + snap));",
                    "});",
                    "",
                    "return pos;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getFreePosition",
            "designerId": "226b6e3c-994a-4b9c-87fc-595c670177af"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSlideComponents",
                "implHandler": [
                    "return this.getReferences().panelContent.el.query('.html-component');"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getSlideComponents",
            "designerId": "60310b0e-9aff-4e1d-89ce-0196b04f74d9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCurrentState",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    slides = Ext.clone(Ext.pluck(refs.treeSlides.store.getRange(), 'data')).map(function(node) {",
                    "\t\t",
                    "\t\tprint(\"printing node\", node)",
                    "        return cleanTreeNodeData(node);",
                    "    });",
                    "     // make dict where key is its id",
                    "    var slidesDict = {};",
                    "    for (var i = 0; i < slides.length; i++){",
                    "        slidesDict[slides[i].id] = slides[i];",
                    "",
                    "    }",
                    "    questions = Ext.clone(Ext.pluck(me.getStore('QuestionsStoreSlides').getRange(), 'data')).map(function(node) {",
                    "        //return cleanTreeNodeData(node);",
                    "        return node;",
                    "    });",
                    "    var questionsDict = {};",
                    "    for (var i = 0; i < questions.length; i++){",
                    "        questionsDict[questions[i].id] = questions[i];",
                    "    }",
                    "",
                    "    answers = Ext.clone(Ext.pluck(me.getStore('PersonAnswers').getRange(), 'data')).map(function(node) {",
                    "        //return cleanTreeNodeData(node);",
                    "        return node;",
                    "    });",
                    "    var answersDict = {};",
                    "    for (var i = 0; i < answers.length; i++){",
                    "        answersDict[answers[i].questionId] = answers[i];",
                    "    }",
                    "",
                    "data = {",
                    "        slides: slidesDict,",
                    "        pageSetup: me._pageSetup,",
                    "        questions: questionsDict,",
                    "\t\tanswers: answersDict",
                    "    };",
                    "return data;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCurrentState",
            "designerId": "3f6a4f62-018d-49c9-b824-31b121807d3b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slide"
                ],
                "fn": "loadSlideState",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    parentEl = refs.panelContent.el.down('#html-slide');",
                    "",
                    "me.clearSlidePanel();",
                    "",
                    "if(slide) {",
                    "    var content = Ext.decode(slide.get('content') || '{}');",
                    "    for (var key in content.components){",
                    "        var component = content.components[key];",
                    "\t\tif(!component.id){",
                    "\t\t\t// if component itself doesnt have id, we append it - this is needed for questions when they are created offline",
                    "\t\t\tcomponent.id = key;",
                    "\t\t}",
                    "        this.insertComponent(component);",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadSlideState",
            "designerId": "195e5c5e-5bd3-4c30-af87-d0c2cb6c6a33"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "clearSlidePanel",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    parentEl = refs.panelContent.el.down('#html-slide');",
                    "",
                    "// remove components from panel",
                    "Ext.each(parentEl.query('.html-component'), function(component) {",
                    "    parentEl.removeChild(component);",
                    "}, this);",
                    "",
                    "// deselect all components",
                    "if(me._selectedComponents){",
                    "\tfor(var i = 0; i < me._selectedComponents.length; i++){",
                    "\t\tme._selectedComponents[i].fireEvent('deselect');",
                    "\t}",
                    "}",
                    "me._selectedComponents = [];",
                    "me.allComponents = []; // clear old components from prev slide",
                    "// hide tools",
                    "me.hideComponentTools();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearSlidePanel",
            "designerId": "307a5cc0-e37a-4cce-8bb3-c1f5a9f42a38"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "item"
                ],
                "fn": "addComponentListeners",
                "implHandler": [
                    "var me = this,",
                    "    item = Ext.get(item);",
                    "",
                    "item.on('deselect', function(e,t){",
                    "    item.removeCls('selected');",
                    "    /*if(item._resizer){",
                    "              item._resizer.destroy();",
                    "        item._resizer = null;",
                    "    }*/",
                    "});",
                    "item.on('select', function(e,t){",
                    "    me._selectedComponents.push(item);",
                    "    item.addCls('selected');",
                    "    /*if(!item._resizer){",
                    "        me.createResizer(item);",
                    "",
                    "    }*/",
                    "});",
                    "item.on('click', function(e, t) {",
                    "    if(e.stopPropagation){ e.stopPropagation(); }",
                    "    if(me.previewing || (!e.ctrlKey && !e.shiftKey )){ // if we are previewing or we didnt hold multiselect buttons",
                    "        for(var i = 0; i < me._selectedComponents.length; i++){",
                    "            var cmp = me._selectedComponents[i];",
                    "            cmp.fireEvent('deselect');",
                    "        }",
                    "        me._selectedComponents = []; // clear array",
                    "        me.hideComponentTools();",
                    "    }",
                    "    else{",
                    "        if (e.ctrlKey || e.shiftKey) {",
                    "            // check if this component is already in array of selected components - in this case - remove it",
                    "            var index = me._selectedComponents.indexOf(item);",
                    "            if (index > -1) {",
                    "                var removedItem = me._selectedComponents.splice(index, 1)[0];",
                    "                item.fireEvent('deselect');",
                    "                if(!me._selectedComponents.length){// disable tools if there are no more components selected",
                    "",
                    "                    me.hideComponentTools();",
                    "                }",
                    "                // no items selected anymore - return",
                    "                return;",
                    "            }",
                    "        }",
                    "    }",
                    "    if(!me.previewing){",
                    "        item.fireEvent('select');",
                    "        me.showComponentTools(item);",
                    "    }",
                    "    if(me.previewing){",
                    "        // previewing",
                    "",
                    "\t\tif(!t){",
                    "\t\t\tconsole.warn(\"Error occured - maybe with sliders, drag and drop etc\");",
                    "\t\t}",
                    "",
                    "        // Handle checkboxes and radio buttons",
                    "        var SELECTED_VALUE = t.getAttribute('idx'); // idx have checboxes and radio buttons",
                    "        if (SELECTED_VALUE){",
                    "            // getting array from html collection",
                    "\t\t\tvar answers = Array.from(item.dom.children[0].children), // to change dom style",
                    "\t\t\t\tquestionId = item.el._opts.id,",
                    "\t\t\t\tprevAnswer = me.getStore('PersonAnswers').findRecord('questionId', questionId),",
                    "\t\t\t\tanswers_js = prevAnswer? Ext.decode(prevAnswer.data.answer): {};",
                    "",
                    "            answers.shift(); // remove first text item (text) - all other are radio / check buttons",
                    "",
                    "\t\t\tvar type = answers[0].getAttribute('type');",
                    "            switch(type) {",
                    "                case 'radio':",
                    "                    for (var i = 0, len = answers.length; i < len; i++) {",
                    "                        answers[i].classList.remove('selected');",
                    "                        answers_js[i] = false;",
                    "                    }",
                    "                    answers[SELECTED_VALUE].classList.add('selected');",
                    "                    answers_js[SELECTED_VALUE] = true;",
                    "                    break;",
                    "                case 'check':",
                    "                    // toggle the selected value",
                    "                    answers[SELECTED_VALUE].classList.toggle(\"selected\");",
                    "                    answers_js[SELECTED_VALUE] = !answers_js[SELECTED_VALUE];",
                    "\t\t\t\t\tif(answers_js[SELECTED_VALUE] === undefined){",
                    "\t\t\t\t\t\tanswers_js[SELECTED_VALUE] = true;",
                    "\t\t\t\t\t}",
                    "                    break;",
                    "                default:",
                    "",
                    "                    console.warn(\"Caller - addComponentListeners\", \"Unsupported component type\" ,type);",
                    "\t\t\t\t\treturn;",
                    "            }",
                    "\t\t\tvar now = new Date();",
                    "\t\t\tvar recordAnswers = {",
                    "\t\t\t\tquestionId: item._opts.id,",
                    "\t\t\t\tid: createGUID(),",
                    "\t\t\t\tcreated: now,",
                    "\t\t\t\tlastChanged: now,",
                    "\t\t\t\tpersonProgramId: me.currentPersonProgram.personTrainingProgramId,",
                    "\t\t\t\tanswer:{},",
                    "\t\t\t\tscore: 0 // TEMP - TODO CHANGE RECORD AFTER EVALUATING",
                    "\t\t\t};",
                    "",
                    "            // create record",
                    "            for (var key in answers_js) {",
                    "                recordAnswers.answer[key] = answers_js[key];",
                    "            }",
                    "            recordAnswers.answer = Ext.encode(recordAnswers.answer);",
                    "",
                    "\t\t\t// find in store if record for this question already exists - if it does overwrite it",
                    "\t\t\tvar personAnswersStore = me.getStore('PersonAnswers');",
                    "\t\t\tvar answerExists = personAnswersStore.findRecord('questionId', recordAnswers.questionId);",
                    "",
                    "",
                    "\t\t\tif(answerExists){",
                    "\t\t\t\t// remove all answers that may be duplicates and add new one",
                    "\t\t\t\tvar tmpNewArray = [];",
                    "",
                    "\t\t\t\tfor(var j = 0; j < personAnswersStore.data.items.length; j++){",
                    "\t\t\t\t\tvar _tempAnswer = personAnswersStore.data.items[j];",
                    "\t\t\t\t\tif(_tempAnswer.data.questionId == recordAnswers.questionId){",
                    "\t\t\t\t\t\ttmpNewArray.push(_tempAnswer);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}personAnswersStore.remove(tmpNewArray); // remove all answers that have this question id",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar answerRec = personAnswersStore.add(recordAnswers)[0];",
                    "\t\t\tanswerRec.phantom = true;",
                    "",
                    "\t\t\t// save this to localstorage - post answers only on quiz end, restore answers in localstorage and in store on page reload",
                    "\t\t\tme.saveState(true); // parameter true is dontSync - store this only in localstorage and dont push on server - yet",
                    "",
                    "        }",
                    "    }",
                    "});",
                    "item.on('dblclick', function(e, t) {",
                    "    if(!me.previewing){",
                    "        me.editComponent(item);",
                    "    }",
                    "});",
                    "",
                    "item.on('_edit', function(e, t) {",
                    "    if(!me.previewing){",
                    "        me.editComponent(item);",
                    "    }",
                    "});",
                    "",
                    "item.on('_duplicate', function(e, t) {",
                    "    if(!me.previewing){",
                    "        me.duplicateComponent(item);",
                    "    }",
                    "});",
                    "",
                    "item.on('_delete', function(e, t) {",
                    "    if(!me.previewing){",
                    "        me.deleteComponent(item, true); // sync is true",
                    "        me.hideComponentTools(item);",
                    "",
                    "    }",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addComponentListeners",
            "designerId": "7bf3e380-e8e4-4de7-be94-514ca84c1fdc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "showComponentTools",
                "implHandler": [
                    "var me = this;",
                    "",
                    "if(!me._componentTools) {",
                    "    me._componentTools = me.getView().add({ xtype: 'edittools' });",
                    "}",
                    "me._componentTools.getController().show({ components: me._selectedComponents });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showComponentTools",
            "designerId": "b44eeee3-6928-4582-a8f8-fdda95781ce8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "hideComponentTools",
                "implHandler": [
                    "var me = this;",
                    "",
                    "if(!me._componentTools) {",
                    "    me._componentTools = me.getView().add({ xtype: 'edittools' });",
                    "}",
                    "me._componentTools.close();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "hideComponentTools",
            "designerId": "0e46b6d4-ce5e-4aa5-906d-d600242515f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts",
                    "callback"
                ],
                "fn": "insertComponent",
                "implHandler": [
                    "opts = Ext.applyIf(opts || {}, {",
                    "    type: null,",
                    "    height: null,",
                    "    width: null,",
                    "    x: null,",
                    "    y: null,",
                    "    html: '',",
                    "    options: [],",
                    "    multi: false,",
                    "    src: '',",
                    "    cls: null,",
                    "    style: null",
                    "});",
                    "",
                    "if (!opts.type) {",
                    "    console.warn('Error', 'No component type');",
                    "    return;",
                    "}",
                    "",
                    "",
                    "if (opts.cls && typeof opts.cls == \"string\") {",
                    "    opts.cls = [opts.cls];",
                    "}",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    pos = me.getFreePosition(),",
                    "    snap = me._pageSetup.snap,",
                    "    parentEl = refs.panelContent.el.down('#html-slide'),",
                    "    cmp = document.createElement('div'),",
                    "    currentSlide = me.getCurrentSlide();",
                    "",
                    "if(!me.currentSlide){",
                    "\tme.newSlide();",
                    "}",
                    "",
                    "// set size",
                    "// if(opts.type == 'image' && opts.src) {",
                    "//     // determine image size",
                    "//     var img = new Image();",
                    "",
                    "//     img.onload = function() {",
                    "//         cmp.width = me.round(isNull(opts.width, img.width));",
                    "//         cmp.height = me.round(isNull(opts.height, img.height));",
                    "//         cmp.style.width = cmp.width + 'px';",
                    "//         cmp.style.height = cmp.height + 'px';",
                    "//     };",
                    "//     img.src = opts.src;",
                    "",
                    "//     // show image as background",
                    "//      cmp.style.backgroundImage = 'url(' + opts.src + ')';",
                    "// }",
                    "// else {",
                    "",
                    "if(opts.x === undefined || opts.x === null){",
                    "\topts.x = pos.x;",
                    "}",
                    "if(opts.y === undefined || opts.y === null){",
                    "\topts.y = pos.y;",
                    "}",
                    "opts.x = cmp.x = pos.x = me.round(opts.x);",
                    "opts.y = cmp.y = pos.y = me.round(opts.y);",
                    "opts.width = cmp.width = pos.width = me.ceil(opts.width || pos.width);",
                    "opts.height = cmp.height = pos.height = me.ceil(opts.height || pos.height);",
                    "",
                    "cmp.style.width = cmp.width + 'px';",
                    "cmp.style.height = cmp.height + 'px';",
                    "// }",
                    "",
                    "// set classes",
                    "cmp.classList.add('html-component');",
                    "",
                    "// set position",
                    "cmp.x = opts.x = isNull(opts.x, pos.x);",
                    "cmp.y = opts.y = isNull(opts.y, pos.y);",
                    "cmp.style.left = cmp.x + 'px';",
                    "cmp.style.top = cmp.y + 'px';",
                    "",
                    "// set content",
                    "var content = document.createElement('div');",
                    "var html = opts.html;",
                    "",
                    "// todo - simplify this if - but from server opts.type is returned as Single or Multi selection because it doesnt have special attribute",
                    "if ((opts.type == me.cmpTypes.SELECTION && opts.options) || opts.type == 'Single selection' ||opts.type == \"Multi selection\") {",
                    "    cmp.style.height = ''; // remove height property from component so it will default to 100%",
                    "    opts.cls = [me.cmpTypes.SELECTION];",
                    "",
                    "",
                    "    // insert selection has been called with specific id, so we must retrieve it from database end spawn it here",
                    "    /*var storageData = Ext.decode(localStorage.getItem('mxp_elearning'))[me.programId],",
                    "        questions = storageData.questions,",
                    "        question = questions[opts.id];",
                    "\t*/",
                    "\t var question = me.getStore('QuestionsStoreSlides').findRecord('id',opts.id);",
                    "    if(!question){",
                    "        console.warn(\"No questions exist for this program. Returning...\");",
                    "        return;",
                    "    }",
                    "",
                    "",
                    "    var record = question.data;",
                    "    opts.type = record.fieldType;",
                    "    // TODO - FIx this line below because its inefficient -",
                    "    opts.options = Ext.decode(record.lookups);",
                    "    html = record.question;",
                    "    // todo we dont store in database if question is multi answer or not so in editSelection this text is rendered",
                    "    opts.multi = opts.type == \"Multi selection\"; // checks against string if its multi selection",
                    "    opts.html = html;",
                    "    opts.cls = [me.cmpTypes.SELECTION];",
                    "    opts.id = opts.id;",
                    "",
                    "    html = '<div class=\"text\">' +'<h3 style=\"text-align:center;\">'+ html + '</h3>' + '</div>';",
                    "",
                    "    Ext.each(opts.options, function (option, index, allItems) {",
                    "        var cls = ['option', (opts.multi ? 'check' : 'radio')];",
                    "",
                    "        if (option.correct) {",
                    "            cls.push('correct');",
                    "\t\t}",
                    "",
                    "\t\t// find answers in answers store - newly created components dont have answers yet so 'selected' wont be applied",
                    "\t\tvar answerRecord = me.getStore('PersonAnswers').findRecord('questionId', opts.id); // find record by questionGuid",
                    "\t\tif(answerRecord){",
                    "\t\t\tif(Ext.decode(answerRecord.data.answer)[index] === true){",
                    "\t\t\t\tcls.push('selected');",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "        // added two custom attributes idx which is index of element (starting with 0) and type which can contain chech or radio",
                    "        html += '<div class=\"' + cls.join(' ') + '\" idx=' + index + ' type=' + (opts.multi ? 'check' : 'radio') + ' style=\"width:fit-content;\">' + option.text + '</div>';",
                    "    });",
                    "}",
                    "",
                    "if (opts.type == me.cmpTypes.IMAGE && opts.src) {",
                    "    if(navigator.onLine){",
                    "        content.style.backgroundImage = 'url(' + opts.src + ')';",
                    "    }else{",
                    "        content.style.backgroundColor = 'powderblue';",
                    "        html = 'Image cannot be loaded - go online to view photo';",
                    "    }",
                    "}",
                    "",
                    "// adding classes to surrounding div element of component",
                    "content.classList.add('html-content');",
                    "Ext.each(opts.cls, function (cls) {",
                    "    content.classList.add(cls);",
                    "});",
                    "",
                    "content.innerHTML = html;",
                    "content = cmp.appendChild(content);",
                    "cmp = parentEl.dom.appendChild(cmp);",
                    "",
                    "cmp.style.height = me.ceil(cmp.clientHeight)+'px'; // again make sure that components are snapping to corrent grid",
                    "",
                    "// check if content is overflowing the panel - reset it back to bottom of panel",
                    "if(pos.y +  me.round(cmp.clientHeight) > refs.panelContent.el.getHeight()){",
                    "    opts.y = cmp.y = pos.y =  me.round(refs.panelContent.el.getHeight() -  cmp.clientHeight);",
                    "    cmp.style.top = opts.y+'px';",
                    "}",
                    "",
                    "cmp._opts = opts;",
                    "cmp.type = opts.type;",
                    "",
                    "extCmp = Ext.get(cmp);",
                    "extCmp._opts = opts;",
                    "extCmp.type = opts.type;",
                    "",
                    "",
                    "if (!me.previewing) {",
                    "    cmp._dragger = new Ext.drag.Source({",
                    "        element: extCmp,",
                    "        constrain: {",
                    "            element: parentEl,",
                    "            snap: {",
                    "                x: snap,",
                    "                y: snap",
                    "            }",
                    "        },",
                    "        listeners: {",
                    "            beforedragstart: function (component, info, event, eOpts) {",
                    "",
                    "\t\t\t\tif(!me._selectedComponents.length){",
                    "\t\t\t\t\t// if no componets are selected - fire click for this component",
                    "\t\t\t\t\tcomponent.config.element.fireEvent('click');",
                    "\t\t\t\t}",
                    "\t\t\t\tif (info.eventTarget.classList.contains('x-resizable-handle')) {",
                    "\t\t\t\t\treturn false;",
                    "\t\t\t\t}",
                    "",
                    "            },",
                    "            dragcancel: function (component, info, event, eOpts) {",
                    "                var prevWrapper = document.getElementById(\"lineWrapper\");",
                    "                if(prevWrapper){",
                    "                    prevWrapper.outerHTML = \"\"; // remove old wrapper",
                    "                }",
                    "            },",
                    "            dragend: function (component, info, event, eOpts) {",
                    "                var prevWrapper = document.getElementById(\"lineWrapper\");",
                    "                if(prevWrapper){",
                    "\t\t\t\t\tprevWrapper.outerHTML = \"\"; // remove old wrapper",
                    "\t\t\t\t}",
                    "\t\t\t\tvar currentSlide = me.getCurrentSlide();",
                    "",
                    "\t\t\t\t// set new info to this new altered component",
                    "",
                    "\t\t\t\tvar alteredContent = Ext.decode(currentSlide.data.content);",
                    "\t\t\t\tfor(var i = 0; i < me._selectedComponents.length; i++){",
                    "\t\t\t\t\t//var id = component.config.element._opts.id;",
                    "\t\t\t\t\tvar id = me._selectedComponents[i]._opts.id;",
                    "\t\t\t\t\tfor (var key in alteredContent.components){",
                    "\t\t\t\t\t\tif(alteredContent.components[key].id == id){",
                    "\t\t\t\t\t\t\talteredContent.components[key].x = component._element.dom.offsetLeft;",
                    "\t\t\t\t\t\t\talteredContent.components[key].y = component._element.dom.offsetTop;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "                // change store and sync",
                    "                var storeItems = me.getStore('TreeStoreSlides').data.items;",
                    "",
                    "\t\t\t\t/*var slide = me.getStore('TreeStoreSlides').findRecord('id', currentSlide.id);",
                    "\t\t\t\tslide.data.content = Ext.encode(alteredContent);",
                    "\t\t\t\tslide.data.lastChanged = new Date();",
                    "\t\t\t\tslide.phantom = true;",
                    "\t\t\t\t*/",
                    "\t\t\t\tfor(var i = 0; i < storeItems.length; i++){",
                    "\t\t\t\t\tif(storeItems[i].id == currentSlide.id){",
                    "\t\t\t\t\t\tstoreItems[i].data.content = Ext.encode(alteredContent);",
                    "\t\t\t\t\t\tstoreItems[i].data.lastChanged = new Date();",
                    "\t\t\t\t\t\tstoreItems[i].phantom = true;",
                    "\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\tme.saveState();",
                    "\t\t\t\tme._dragged = true;",
                    "            },",
                    "            dragmove: function (component, info, event, eOpts) {",
                    "\t\t\t\tvar difx = component._element.dom.offsetLeft - component.config.element._opts.x,",
                    "\t\t\t\t\tdify = component._element.dom.offsetTop - component.config.element._opts.y;",
                    "",
                    "\t\t\t\tfor(var i = 0; i < me._selectedComponents.length; i++){",
                    "                    var selectedCmp = me._selectedComponents[i];",
                    "                    selectedCmp._opts.x += difx;",
                    "                    selectedCmp._opts.y += dify;",
                    "",
                    "\t\t\t\t\tselectedCmp.dom.offsetLeft = selectedCmp._opts.x;",
                    "\t\t\t\t\tselectedCmp.dom.offsetTop = selectedCmp._opts.y;",
                    "",
                    "\t\t\t\t\tselectedCmp.dom.style.left = selectedCmp._opts.x+'px';",
                    "\t\t\t\t\tselectedCmp.dom.style.top = selectedCmp._opts.y+'px';",
                    "",
                    "                }",
                    "\t\t\t\tme.drawHelperLines(component);",
                    "\t\t\t\tme.showComponentTools(component);",
                    "",
                    "            },",
                    "            dragstart: function (component, info, event, eOpts) {",
                    "                component.config.element._opts.x = component._element.dom.offsetLeft;",
                    "                component.config.element._opts.y = component._element.dom.offsetTop;",
                    "                me.drawHelperLines(component);",
                    "",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    me.createResizer(cmp);",
                    "",
                    "}",
                    "",
                    "me.addComponentListeners(cmp);",
                    "me.allComponents.push(extCmp); // append this newly created component to all components, so we can select it later",
                    "",
                    "if(callback){ callback(); }",
                    "",
                    "return extCmp;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertComponent",
            "designerId": "4bea683f-3541-4c56-b342-b7e4d7fd9cfe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "editComponent",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "component = component || me._selectedComponent;",
                    "if (component) {",
                    "    if ((component.type == me.cmpTypes.IMAGE) || (component.type == me.cmpTypes.VIDEO) || (component.type == me.cmpTypes.AUDIO) ){",
                    "        Ext.toast(\"Cannot edit image, video or audio.\");",
                    "        return;",
                    "    }",
                    "",
                    "    if (component.type == me.cmpTypes.SELECTION || component.type == \"Single selection\" || component.type == \"Multi selection\") {",
                    "        me.editSelection(component);",
                    "    }",
                    "",
                    "    else {",
                    "        var wnd = me.getView().add({xtype: 'texteditor'});",
                    "",
                    "        wnd.getController().show({",
                    "            value: component.el.down('.html-content').dom.innerHTML,",
                    "            callback: function (value) {",
                    "                component.el.down('.html-content').dom.innerHTML = value;",
                    "                component._opts.html = value;",
                    "                me.saveState();",
                    "            },",
                    "            scope: me",
                    "        });",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editComponent",
            "designerId": "a65c2699-c344-4ab7-8c79-bb207a231277"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "duplicateComponent",
                "implHandler": [
                    "var me = this,",
                    "    component = Ext.clone(component);",
                    "var opts = Ext.clone(component._opts);",
                    "",
                    "delete opts.x;",
                    "delete opts.y;",
                    "",
                    "var cmpType = component._opts.type;",
                    "if (cmpType == me.cmpTypes.SELECTION || cmpType == \"Single selection\" || cmpType == \"Multi selection\") {",
                    "    opts.text = component._opts.html;",
                    "    opts.answers = component._opts.options;",
                    "    me.createSelection(opts);",
                    "}",
                    "",
                    "else{",
                    "    // for all other components - call ordinary insert component",
                    "",
                    "    // rename its id",
                    "    opts.id = createGUID();",
                    "    var cmp = this.insertComponent(opts);",
                    "",
                    "}",
                    "me.saveState();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "duplicateComponent",
            "designerId": "3126b221-befa-401b-a454-eb2827a15a01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "sync"
                ],
                "fn": "deleteComponent",
                "implHandler": [
                    "var me = this,",
                    "\trefs = this.getReferences(),",
                    "\tquestionStore = me.getStore('QuestionsStoreSlides'),",
                    "\ttreeStoreSlides = me.getStore('TreeStoreSlides');",
                    "",
                    "if(component) {",
                    "",
                    "\tif(sync){ // we might not always want to sync, but only delete this component in order to redraw it",
                    "",
                    "",
                    "",
                    "\t\t// remove component from slide content and set its record.phantom to true, for it to later update",
                    "\t\tvar id = component.el._opts.id;",
                    "\t\tvar currentSlide = me.getCurrentSlide();",
                    "",
                    "",
                    "\t\tvar rec = questionStore.findRecord('id', id);",
                    "\t\tquestionStore.remove(rec);",
                    "",
                    "\t\t// UPDATING SLIDE",
                    "",
                    "\t\t// set new info to this new altered component",
                    "\t\tvar removedComponentsArray = {};",
                    "\t\tvar slideContent = Ext.decode(currentSlide.data.content);",
                    "\t\tfor (var key in slideContent.components){",
                    "\t\t\tif(slideContent.components[key].id != id){",
                    "\t\t\t\t// add every other component than the one we are deleting",
                    "\t\t\t\tremovedComponentsArray[key] = slideContent.components[key];",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\tvar componentsDict = {'components': removedComponentsArray};",
                    "",
                    "\t\t// change slide store and sync",
                    "\t\tvar store = me.getStore('TreeStoreSlides');",
                    "\t\tvar rec = store.findRecord('id', currentSlide.id);",
                    "\t\t// update record",
                    "\t\trec.data.content = Ext.encode(componentsDict);",
                    "\t\trec.data.changed = 'Y';",
                    "\t\trec.data.lastChanged = new Date();",
                    "\t\trec.phantom = true;",
                    "",
                    "\t\t// remove possible answers for this question from store",
                    "\t\tvar personAnswers = me.getStore('PersonAnswers');",
                    "\t\tvar answerRecord = personAnswers.findRecord('questionId', id);",
                    "\t\tif(answerRecord){",
                    "\t\t\tpersonAnswers.remove(answerRecord);",
                    "\t\t\tpersonAnswers.sync();",
                    "\t\t}",
                    "",
                    "",
                    "",
                    "",
                    "\t}",
                    "\tif(!me.allComponents){",
                    "\t\tconsole.warn(\"Error - For some reason this component was not in >allComponents< array.\");",
                    "\t\tme.allComponents.remove(component);",
                    "\t}",
                    "",
                    "",
                    "",
                    "\tcomponent.destroy();",
                    "\tcomponent = null;",
                    "",
                    "\tif(sync){",
                    "\t\t// save state",
                    "\t\tme.saveState(); //save changes to localstorage and sync with server if online",
                    "\t}",
                    "}"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "deleteComponent",
            "designerId": "11abc80f-a362-40c7-b898-1d12d9e03639"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "insertTitle",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "",
                    "        id: createGUID(),",
                    "        type: me.cmpTypes.TITLE,",
                    "        cls: 'title',",
                    "        html: value || 'Title',",
                    "        height: 50",
                    "",
                    "    });",
                    "",
                    "",
                    "",
                    " me.saveState();",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "insertTitle",
            "designerId": "e2bff152-6385-4d09-9ca3-2c2bf6f3a06d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "insertText",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        id: createGUID(),",
                    "        type: me.cmpTypes.TEXT,",
                    "        cls: 'text',",
                    "        html: value || 'Text',",
                    "        height: 200",
                    "",
                    "    });",
                    " me.saveState();",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "insertText",
            "designerId": "81f4b2d3-41d5-4dc6-8e62-9a8e897966a1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "insertImage",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        id: createGUID(),",
                    "        type: me.cmpTypes.IMAGE,",
                    "        cls: 'image',",
                    "        html: '',",
                    "        src: 'resources/images/example.jpg',",
                    "        height: 275,",
                    "    });",
                    " me.saveState();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertImage",
            "designerId": "c9ef8514-cd23-4579-b26f-1d1828434836"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "insertSelection",
                "implHandler": [
                    "this.editSelection(null, opts);",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertSelection",
            "designerId": "6e6a6a7a-6d92-436f-be75-91c4b2f30c53"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "opts"
                ],
                "fn": "editSelection",
                "implHandler": [
                    "opts = Ext.applyIf(opts || {}, {",
                    "    multi: false",
                    "});",
                    "",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "    state = component && component._opts,",
                    "    multi = state && state.multi || opts.multi,",
                    "    wnd = me.getView().add({ xtype: 'selectioneditor' });",
                    "",
                    "wnd.getController().show({",
                    "    text: state && state.html,",
                    "    options: state && state.options,",
                    "    multi: multi,",
                    "    callback: function(text, answers) {",
                    "        var opts = {",
                    "            text: text,",
                    "            answers: answers,",
                    "            multi:multi,",
                    "            component : component",
                    "        };",
                    "",
                    "",
                    "",
                    "\t\tme.createSelection(opts);",
                    "",
                    "",
                    "    },",
                    "    scope: me",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editSelection",
            "designerId": "0261ee9e-580e-422e-beaf-6dae04f8894c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "round",
                "implHandler": [
                    "var snap = this._pageSetup.snap;",
                    "",
                    "return Math.round(value / snap) * snap;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "round",
            "designerId": "68f21160-1e1d-4273-b057-a7122cc60c1c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "ceil",
                "implHandler": [
                    "var snap = this._pageSetup.snap;",
                    "",
                    "return Math.ceil(value / snap) * snap;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "ceil",
            "designerId": "84f0ba85-985a-483e-b25f-43bfec827df1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "insertAudio",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        id: createGUID(),",
                    "        type: me.cmpTypes.AUDIO,",
                    "        cls: 'audio',",
                    "        html: '<audio controls>  <source src=\"resources/audio/horse.mp3\" type=\"audio/mpeg\">Your browser does not support the audio element.</audio>',",
                    "        src: 'resources/audio/horse.mp3',",
                    "        height: 50,",
                    "    });",
                    "me.saveState();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertAudio",
            "designerId": "405629a3-e3ca-453c-a4aa-5f608c01f13b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "insertVideo",
                "implHandler": [
                    "var me = this,",
                    "    cmp = me.insertComponent({",
                    "        id: createGUID(),",
                    "        type: me.cmpTypes.VIDEO,",
                    "        cls: 'video',",
                    "        html: '<video width=\"320\" height=\"240\" controls>  <source src=\"resources/videos/mov.mp4\" type=\"video/mp4\"> Your browser does not support the video tag.</video>',",
                    "        src: 'resources/videos/mov.mp4',",
                    "        height: 240,",
                    "    });",
                    "me.saveState();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "insertVideo",
            "designerId": "3f2fee34-8ca6-4b46-9630-6b75f685bad8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getNumSlides",
                "implHandler": [
                    "// Retrieves count of slides (sections don't count)",
                    "var me = this,",
                    "    countSlides = 0,",
                    "    data = Ext.decode(localStorage.getItem('mxp_elearning'))[me.programId];",
                    "if(!data.slides || !Object.keys(data.slides).length){",
                    "    return 0;",
                    "}",
                    "for(var key in data.slides){",
                    "    if(data.slides[key].isSlide ||data.slides[key].categoryId == App.ProgramPageCategoriesEnum.Page){",
                    "        countSlides += 1;",
                    "    }",
                    "}",
                    "return countSlides;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getNumSlides",
            "designerId": "e0dfd087-8a29-4ad5-b877-89df01fc61cc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "evaluate",
                "implHandler": [
                    "// returns [singleSelectionCorrect, singleSelectionQuestions, multipleSelectionScore, multipleSelectionScoreUsingNegative]",
                    "// multipleSelectionScore -> if answer_correct -> answer_score += 1/num_answers",
                    "//\t\t\t\t\t\t\t else: answer_score = (answer_score - 1/num_answers).clamp(0, num_answers)",
                    "//multipleSelectionScoreUsingNegative -> dont clamp incorrectly answered",
                    "Number.prototype.clamp = function (min, max) {",
                    "    return Math.min(Math.max(this, min), max);",
                    "};",
                    "",
                    "// iterate through slides and questions and check score:",
                    "var me = this,",
                    "    usingNegativeScore = false, // config variable which determines if each answer can have negative return points",
                    "    programScore = {\"questions\":{}, \"totalProgramScore\": -1};",
                    "",
                    "var questions = me.getStore('QuestionsStoreSlides').data.items;",
                    "var answersStore = me.getStore('PersonAnswers');",
                    "for(var i = 0; i < questions.length; i++){",
                    "",
                    "    var question = questions[i].data;",
                    "    var answerData = answersStore.findRecord('questionId', question.id).data;",
                    "    programScore.questions[question.id] = me.getScore(question, answerData.answer, usingNegativeScore);",
                    "\tanswerData.score = programScore.questions[question.id]; // setting answer score",
                    "\t",
                    "\t",
                    "\tprint(\"setting new answer score for this answer\",  programScore.questions[question.id] , \"to\", answerData);",
                    "}",
                    "",
                    "",
                    "// suming questions scores to total score",
                    "var totalProgramScore = sumDict(programScore.questions);",
                    "if(totalProgramScore >= me.programData.passScore){",
                    "\tconsole.log(\"%cFinal user score:\", \"color: green\", totalProgramScore);",
                    "}",
                    "else{",
                    "\tconsole.log(\"%cFinal user score:\", \"color: red\", totalProgramScore);",
                    "}",
                    "",
                    "",
                    "",
                    "",
                    "programScore.totalProgramScore = totalProgramScore;",
                    "",
                    "return programScore;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "evaluate",
            "designerId": "ca540b14-5e62-4354-9a3d-a273679157b8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "question",
                    "answer",
                    "usingNegativeScore"
                ],
                "fn": "getScore",
                "implHandler": [
                    "if(!answer){",
                    "\t// user didnt check any options on this question - return",
                    "\treturn 0;",
                    "}",
                    "answer = Ext.decode(answer);",
                    "",
                    "var answerScore = 0;",
                    "var correctAnswer;",
                    "var usersAnswer = answer;",
                    "",
                    "var question_answers = question.options || question.lookups; // in datase options are stored in lookups table so we return lookups",
                    "if( typeof question_answers === 'string'){ // todo sometimes its not encoded - fix this",
                    "\tvar _question = Ext.decode(question_answers);",
                    "",
                    "}else{",
                    "\tvar _question = question_answers;",
                    "}",
                    "var questionNumAnswers = _question.length;",
                    "",
                    "if (question.multi || question.fieldType == \"Multi selection\") { // Todo - decide which attribute to use!!",
                    "\t// make a pre-pass counting num_correct_answers",
                    "\tvar numCorrectAnswers = 0;",
                    "\t_question.forEach(function (option) {",
                    "",
                    "\t\tif (option.correct) {",
                    "\t\t\tnumCorrectAnswers += 1;",
                    "\t\t}",
                    "\t});",
                    "\t// go through all questions in this form",
                    "",
                    "\tfor(var i = 0; i < _question.length; i++){",
                    "\t\tusersAnswer = answer[i];",
                    "\t\tcorrectAnswer = _question[i].correct;",
                    "",
                    "\t\tif(usersAnswer === undefined){ // if he didnt check any options or this checkbox has never been checked",
                    "\t\t\tusersAnswer = false;",
                    "\t\t}",
                    "",
                    "",
                    "\t\tif (usersAnswer == correctAnswer) {",
                    "\t\t\tif (correctAnswer === true) {",
                    "\t\t\t\t// if we checked correct answer - add percent of all correct answers to his score",
                    "\t\t\t\tanswerScore += (1 / numCorrectAnswers);",
                    "\t\t\t}",
                    "\t\t\t// no else - we are not rewarding for not checking not-correct answers",
                    "\t\t}",
                    "\t\telse{",
                    "\t\t\t// we didnt click what is correct",
                    "",
                    "\t\t\tif (correctAnswer === true) {",
                    "\t\t\t\t// if we clicked no but answer was yes, punish user by subtracting percent of all correct answers from his score",
                    "\t\t\t\tanswerScore -= (1 / numCorrectAnswers);",
                    "\t\t\t}",
                    "\t\t\telse{",
                    "\t\t\t\t// if we clicked yes but answer was no, punish user by subtracting only percent of num answers",
                    "\t\t\t\tanswerScore -= (1/ questionNumAnswers);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t// append score of this questionary to totalScore",
                    "\tif(!usingNegativeScore){",
                    "\t\t// clamp between 0 and max",
                    "\t\tanswerScore = (answerScore).clamp(0, questionNumAnswers);",
                    "\t}",
                    "",
                    "} else {",
                    "\t// evaluate",
                    "\tfor(var i = 0; i < _question.length; i++){",
                    "\t\tusersAnswer = answer[i];",
                    "\t\tcorrectAnswer = _question[i].correct;",
                    "",
                    "\t\tif ((correctAnswer === true) && (usersAnswer == correctAnswer)) {",
                    "\t\t\tanswerScore = 1;",
                    "\t\t}",
                    "\t\telse {",
                    "\t\t\tif(usersAnswer == correctAnswer){",
                    "\t\t\t\t// this is not right answer but we checked right one",
                    "",
                    "\t\t\t\tif(usingNegativeScore){",
                    "\t\t\t\t\t// returns -1 - is this too much?",
                    "\t\t\t\t\tanswerScore = -1;",
                    "\t\t\t\t}",
                    "\t\t\t\t// else return 0",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t}",
                    "",
                    "}",
                    "",
                    "return answerScore;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getScore",
            "designerId": "70d68642-a75e-4e88-a776-293bde53e2ac"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "dontSync"
                ],
                "fn": "saveState",
                "implHandler": [
                    "var THUMBNAILS = false,",
                    "\tme = this,",
                    "\trefs = me.getReferences(),",
                    "\tsyncIndicator = Ext.getCmp('syncIndicator'),",
                    "\tcontent = {",
                    "\t\tcomponents: {}",
                    "\t};",
                    "",
                    "// first update current slide",
                    "slide = me.getCurrentSlide();",
                    "if(slide) {",
                    "\tvar slideComponents = me.getSlideComponents();",
                    "\tfor (var key in slideComponents){",
                    "\t\tvar component = slideComponents[key];",
                    "\t\tif(component._opts.type == me.cmpTypes.SELECTION){",
                    "\t\t\t// if its question, append only guid of this question to content components",
                    "\t\t\tvar _opts = Ext.clone(component._opts);",
                    "",
                    "\t\t\tvar _optsNew = {\"type\": _opts.type, \"id\": _opts.id };",
                    "\t\t\tcontent.components[_opts.id]=_optsNew;",
                    "\t\t}else{",
                    "\t\t\t// append whole content",
                    "\t\t\tcontent.components[component._opts.id] = component._opts;",
                    "\t\t}",
                    "\t}",
                    "\t//slide.set('lastChanged', new Date()); // set last changed for this slide here",
                    "\tslide.set('content', Ext.encode(content));",
                    "}",
                    "",
                    "var data = this.getCurrentState();",
                    "",
                    "var localStorageData = Ext.decode(localStorage.getItem('mxp_elearning'));",
                    "// init if we are saving content for duplicate program",
                    "if(!localStorageData[me.programId]){",
                    "\tlocalStorageData[me.programId] = {};",
                    "}",
                    "for (var key in data) {",
                    "\tlocalStorageData[me.programId][key] = data[key];",
                    "}",
                    "",
                    "// sets current state to localstorage and calls update with server",
                    "localStorage.setItem('mxp_elearning', Ext.encode(localStorageData));",
                    "",
                    "if(dontSync){",
                    "\t// for some reason we want to store current state in localstorage but not sync to server",
                    "\t// this is used for personAnswers where we dont post for every click on answer but just want to save to localstorage",
                    "\t// so he can return to this quiz if his computer crashes",
                    "\tme.updateStatusIndicator(false);",
                    "\treturn;",
                    "}",
                    "var storeSlides = me.getStore('TreeStoreSlides'),",
                    "\tstoreQuestions = me.getStore('QuestionsStoreSlides'),",
                    "\tstorePrograms = me.getStore('PersonPrograms');",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "if(navigator.onLine){",
                    "\t// sync all stores",
                    "\tstoreSlides.sync();",
                    "\tstoreQuestions.sync();",
                    "\tstorePrograms.sync();",
                    "",
                    "",
                    "\t// after syncing everything - we can delete current programs' removed entries",
                    "\tlocalStorageData = Ext.decode(localStorage.getItem('mxp_elearning'));",
                    "\tif(localStorageData[me.programId].removed){",
                    "\t\tdelete localStorageData[me.programId].removed;",
                    "\t}",
                    "\tlocalStorage.setItem('mxp_elearning', Ext.encode(localStorageData));",
                    "",
                    "\tme.updateStatusIndicator(true);",
                    "}else{",
                    "\tme.updateStatusIndicator(false);",
                    "}",
                    "",
                    "var btnDeleteSlide = Ext.getCmp('btnDeleteSlide'),",
                    "\tbtnPreview = Ext.getCmp('btnPreview');",
                    "",
                    "btnDeleteSlide.setDisabled(!storeSlides.data.items.length);",
                    "",
                    "if(!me.programData){",
                    "\tbtnPreview.enable();",
                    "\tbtnPreview.setText('Preview');",
                    "}else{",
                    "\tif(me.programData.validTo > new Date()){",
                    "\t\tbtnPreview.setText('Preview (Not Valid Anymore)');",
                    "\t\tbtnPreview.removeCls('active-program');",
                    "\t\tbtnPreview.disable();",
                    "\t}else{",
                    "\t\tif(!storeQuestions.data.items.length){",
                    "\t\t\tbtnPreview.disable();",
                    "\t\t\tbtnPreview.setText('Preview (No Questions)');",
                    "\t\t}else{",
                    "",
                    "",
                    "\t\t\tif(me.currentPersonProgram && (me.currentPersonProgram.attempt >= me.programData.maxAttemptsTrainingMode + me.programData.maxAttemptsScoreMode)){",
                    "\t\t\t\t// Cannot attempt any more tries... returning",
                    "\t\t\t\tbtnPreview.setText('Preview (No More Attempts)');",
                    "\t\t\t\tbtnPreview.disable();",
                    "\t\t\t}else{",
                    "\t\t\t\tbtnPreview.enable();",
                    "\t\t\t\tbtnPreview.setText('Preview');",
                    "",
                    "\t\t\t\tif(btnPreview.hasCls('active-program')){",
                    "\t\t\t\t\t// restore text",
                    "\t\t\t\t\tbtnPreview.setText('Preview (Resume)');",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "}",
                    "",
                    "if(me.getCurrentSlide()){",
                    "\tcallback =function(url,base64encodedImg){",
                    "\t\tprint(\"encoded\", base64encodedImg);",
                    "\t};",
                    "",
                    "\tif(THUMBNAILS){",
                    "\t\tme.captureSlide(callback);",
                    "\t\tme.renderThumbnails();",
                    "\t}",
                    "",
                    "",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "saveState",
            "designerId": "8b19fe4f-215d-47c3-9802-2d0700bee612"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setInitialSlide",
                "implHandler": [
                    "// this function is used to set slide after syncing with server or initially recieving data (from localstorage or server)",
                    "var me = this,",
                    "    refs = me.getReferences(),",
                    "\tcurrentSlide = me.getCurrentSlide();",
                    "",
                    "",
                    "me.setBackground(me._pageSetup.background, false); // dont save when restoring background",
                    "refs.panelContent.setWidth(me._pageSetup.width);",
                    "refs.panelContent.setHeight(me._pageSetup.height);",
                    "",
                    "",
                    "if(currentSlide){",
                    "\trefs.treeSlides.setSelection(null);",
                    "    refs.treeSlides.setSelection(currentSlide);",
                    "",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setInitialSlide",
            "designerId": "41a684c4-143c-4d28-a3fb-59420065ce14"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "force = false"
                ],
                "fn": "closePreview",
                "implHandler": [
                    "var me = this,",
                    "\t btnPreview = Ext.getCmp('btnPreview');",
                    "",
                    "me.previewing = false; // setting current previewing state",
                    "",
                    "",
                    "",
                    "if(navigator.onLine){",
                    "\tme.validatePersonProgram();",
                    "",
                    "\t// reset button to default",
                    "\tbtnPreview.removeCls('active-program');",
                    "\tbtnPreview.setText('Preview');",
                    "",
                    "\tclearInterval(me.previewTimer);",
                    "",
                    "}",
                    "else{",
                    "\tExt.toast(\"Cannot validate program. Go online to submit answers.\");",
                    "",
                    "\t",
                    "\t",
                    "\t// write unsynced: true to localstorage to sync person program on online change",
                    "\tvar localStorageData = Ext.decode(localStorage.getItem('mxp_elearning'));",
                    "\tlocalStorageData[me.programId].personProgram = {unsynced: true};",
                    "\tlocalStorage.setItem('mxp_elearning', Ext.encode(localStorageData));",
                    "\t",
                    "\t",
                    "\t",
                    "\t",
                    "\tbtnPreview.addCls('active-program');",
                    "\tbtnPreview.setText('Preview (Resume)');",
                    "",
                    "",
                    "}",
                    "",
                    "if(force){",
                    "\t// timer may force close",
                    "\tbtnPreview.removeCls('active-program');",
                    "\tbtnPreview.setText('Preview');",
                    "\tclearInterval(me.previewTimer);",
                    "",
                    "}",
                    "",
                    "me.togglePreviewFrame(false);",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "closePreview",
            "designerId": "e163cc5f-0509-4e27-9b97-be2e4b72553b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showPreview",
                "implHandler": [
                    "",
                    "",
                    "",
                    "var me = this,",
                    "\trefs = me.getReferences(),",
                    "\tpersonProgramsStore = me.getStore('PersonPrograms'),",
                    "\tpersonAnswersStore = me.getStore('PersonAnswers');",
                    "",
                    "",
                    "var numQuestions = me.getNumQuestions();",
                    "",
                    "if(this.getNumSlides() === 0){",
                    "\tExt.toast(\"Unable to preview program with no pages.\");",
                    "\treturn;",
                    "}",
                    "if(numQuestions === 0){",
                    "\tExt.toast(\"Unable to start preview with no questions.\");",
                    "\treturn;",
                    "}",
                    "if(me.programData.validTo < new Date()){",
                    "\tExt.toast(\"Program is not valid anymore!\");",
                    "\treturn;",
                    "}",
                    "",
                    "if(!navigator.onLine){",
                    "\tExt.toast(\"Cannot start program in offline!\");",
                    "\treturn;",
                    "}",
                    "",
                    "// Create PersonProgram or update it here",
                    "personProgramsStore.load({",
                    "\tparams:{",
                    "\t\tpersonId: me.personId,",
                    "\t\tprogramId: me.programId",
                    "\t},",
                    "\tcallback:function(record){",
                    "\t\tif(!record || record.length === 0){",
                    "\t\t\t//recieved no record back - maybe here we know that this persons program doesnt exist yet so add it",
                    "",
                    "\t\t\tExt.Msg.confirm( 'Start preview', 'Start your first preview?' , function(btn) { // show confirm dialog",
                    "\t\t\t\tif(btn == 'yes') {",
                    "\t\t\t\t\tme.currentPersonProgram = { // store whole record",
                    "\t\t\t\t\t\tpersonProgramGuid: createGUID(),",
                    "\t\t\t\t\t\tpersonId: me.personId,",
                    "\t\t\t\t\t\tprogramId: me.programId,",
                    "\t\t\t\t\t\tprogramStatusId: App.ProgramStatuses[\"In Progress\"],",
                    "\t\t\t\t\t\tcreatedById: me.personId, // TODO - same person is also creating this program? can this be different?",
                    "\t\t\t\t\t\tcreated: new Date(),",
                    "\t\t\t\t\t\tprogramStarted: new Date(),",
                    "\t\t\t\t\t\tlastChanged: new Date(),",
                    "\t\t\t\t\t\tchanged: 'N',",
                    "\t\t\t\t\t\tattempt: 0,",
                    "\t\t\t\t\t};",
                    "",
                    "\t\t\t\t\t// record doesnt exist yet - add new",
                    "\t\t\t\t\tvar rec = personProgramsStore.add(me.currentPersonProgram)[0];",
                    "\t\t\t\t\trec.phantom = true;",
                    "",
                    "\t\t\t\t\tpersonProgramsStore.sync();",
                    "\t\t\t\t\tme.switchToPreviewing(); // display new quiz",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t}",
                    "\t\telse{",
                    "\t\t\tme.currentPersonProgram = record[0].data;",
                    "\t\t\tif(me.currentPersonProgram.attempt >= me.programData.maxAttemptsTrainingMode + me.programData.maxAttemptsScoreMode){",
                    "\t\t\t\tExt.toast(\"No more tries avaliable.\");",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\t// here we can read the records id to use in posting answers",
                    "\t\t\t// add completion time minutes to initial programStarted time",
                    "\t\t\tvar endTime = new Date(new Date(me.currentPersonProgram.programStarted).getTime() +",
                    "\t\t\t\t\t\t\t\t   me.programData.completionTime * 60000); // completion time in database is in minutes",
                    "\t\t\tvar remainingMS = endTime.getTime() - new Date().getTime();",
                    "",
                    "\t\t\tif(remainingMS > 0 && (me.currentPersonProgram.programStatusId == App.ProgramStatuses[\"In Progress\"] ||",
                    "\t\t\t\t\t\t\t\t   me.currentPersonProgram.programStatusId == App.ProgramStatuses.Repeat)){",
                    "",
                    "\t\t\t\tme.switchToPreviewing(false);  // display still active try of this quiz",
                    "\t\t\t}else{",
                    "",
                    "\t\t\t\t//we show dialog that by proceeding we will use another try",
                    "\t\t\t\tExt.Msg.confirm( 'Start preview', 'Start new program preview?' , function(btn) { // show confirm dialog",
                    "\t\t\t\t\tif(btn == 'yes') {",
                    "\t\t\t\t\t\tvar existingRecord = personProgramsStore.findRecord('personTrainingProgramId', me.currentPersonProgram.personTrainingProgramId);",
                    "",
                    "\t\t\t\t\t\t// create new current person program",
                    "\t\t\t\t\t\tme.currentPersonProgram = {",
                    "\t\t\t\t\t\t\tpersonProgramGuid: me.currentPersonProgram.personTrainingProgramId,",
                    "\t\t\t\t\t\t\tattempt: me.currentPersonProgram.attempt + 1, // increase attempt counter",
                    "\t\t\t\t\t\t\tlastChanged: new Date(),",
                    "\t\t\t\t\t\t\tchanged : 'Y',",
                    "\t\t\t\t\t\t\tprogramStatusId: App.ProgramStatuses.Repeat,",
                    "\t\t\t\t\t\t\tprogramStarted: new Date(),",
                    "",
                    "\t\t\t\t\t\t};",
                    "\t\t\t\t\t\t// program already exists - so update it",
                    "\t\t\t\t\t\texistingRecord.data = me.currentPersonProgram;",
                    "\t\t\t\t\t\texistingRecord.phantom = true;",
                    "",
                    "\t\t\t\t\t\tpersonProgramsStore.sync();",
                    "\t\t\t\t\t\tme.switchToPreviewing(); // display new try of this quiz",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showPreview",
            "designerId": "dc85918d-1e9c-4248-be2c-6731dbdbd158"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "preview"
                ],
                "fn": "togglePreviewFrame",
                "implHandler": [
                    "// Display content",
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "//refs.panelMenu.setVisible(!preview); // commented so navigation tree is visible even when solving quiz",
                    "refs.toolbarEdit.setVisible(!preview);",
                    "refs.toolbarPreview.setVisible(!!preview);",
                    "refs.panelContent[preview ? 'removeCls' : 'addCls']('edit');",
                    "refs.panelContent[preview ? 'addCls' : 'removeCls']('preview');",
                    "",
                    "refs.panelSlide.setMargin(preview ? '10' : '10 10 10 0');",
                    "",
                    "// retarget this slide - this redraws current slide without dragger and sizer",
                    "var currentSlide = me.getCurrentSlide();",
                    "refs.treeSlides.setSelection(null);",
                    "refs.treeSlides.setSelection(currentSlide);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "togglePreviewFrame",
            "designerId": "69c5df65-c262-4c3a-b2c9-1dccd06693eb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "clean = true"
                ],
                "fn": "switchToPreviewing",
                "implHandler": [
                    "var me = this,",
                    "    refs = me.getReferences();",
                    "",
                    "me.startPreviewTimer();",
                    "",
                    "me.previewing = true;",
                    "if(clean){",
                    "\t// when we are continuing previewing, we dont want to remove previous answers",
                    "\tme.getStore('PersonAnswers').loadData([],false); // remove previous answers",
                    "}",
                    "",
                    "// show slide state",
                    "",
                    "var firstSlide = refs.treeSlides.store.getAt(0);",
                    "refs.treeSlides.setSelection(firstSlide);",
                    "// on panel toggle - drop down the sections to first actual slide",
                    "if (firstSlide.data.leaf === false){",
                    "    me.nextSlide();",
                    "}",
                    "me.togglePreviewFrame(true);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "switchToPreviewing",
            "designerId": "129fe785-27e1-481c-b4ed-63ada6122104"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "drawHelperLines",
                "implHandler": [
                    "var me = this,",
                    "\t_component = component.config.element? component.config.element: component.el,",
                    "\trefs = me.getReferences(),",
                    "\tpanelWidth = refs.panelContent.el.getWidth(),",
                    "\tpanelHeight = refs.panelContent.el.getHeight(),",
                    "\tcomponentWidth =_component._opts.width,",
                    "\tcomponentMiddleWidth = componentWidth / 2,",
                    "\tcomponentHeight =_component._opts.height,",
                    "\tcomponentMiddleHeight = componentHeight / 2,",
                    "\tx = _component._opts.x,",
                    "\ty = _component._opts.y;",
                    "",
                    "var svgContent = `<svg height=\"` + panelHeight+`\" width=\"` + panelWidth + `\">`;",
                    "// get all components and compare if some line is intersecting its bounding box or middle",
                    "var currentSlide = me.getCurrentSlide();",
                    "var slideComponents = Ext.decode(currentSlide.data.content);",
                    "for (var key in slideComponents.components){",
                    "\tif(key != _component._opts.id){",
                    "",
                    "\t\tvar neighbourCmp = slideComponents.components[key];",
                    "",
                    "\t\t//Todo - multiple lines will draw over the same spot if multiple components have for example same x",
                    "\t\tif(neighbourCmp.x == x){",
                    "\t\t\tsvgContent+= `<line x1=\" ` +x +`\" y1=\"0\" x2=\"` +x +`\" y2=\"`+panelHeight+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>`;",
                    "\t\t}",
                    "\t\tif(neighbourCmp.x + neighbourCmp.width /2 == x + componentMiddleWidth){",
                    "\t\t\tsvgContent+= `<line x1=\" ` +(x + componentMiddleWidth) +`\" y1=\"0\" x2=\"` +(x + componentMiddleWidth) +`\" y2=\"`+panelHeight+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>`;",
                    "",
                    "\t\t}",
                    "\t\tif(neighbourCmp.x + neighbourCmp.width == x + componentWidth){",
                    "\t\t\tsvgContent += `<line x1=\" ` +(x + componentWidth) +`\" y1=\"0\" x2=\"` +(x + componentWidth) +`\" y2=\"`+panelHeight+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>`;",
                    "\t\t}",
                    "",
                    "",
                    "\t\tif(neighbourCmp.y == y){",
                    "\t\t\tsvgContent += `<line y1=\" ` +y +`\" x1=\"0\" y2=\"` +y +`\" x2=\"`+panelWidth+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>                                  `;",
                    "\t\t}",
                    "",
                    "\t\tif(neighbourCmp.y + neighbourCmp.height /2 == y + componentMiddleHeight){",
                    "\t\t\tsvgContent+= `<line y1=\" ` +(y+componentMiddleHeight) +`\" x1=\"0\" y2=\"` +(y + componentMiddleHeight) +`\" x2=\"`+panelWidth+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>`;",
                    "\t\t}",
                    "\t\tif(neighbourCmp.y + neighbourCmp.height == y + componentHeight){",
                    "\t\t\tsvgContent+= `<line y1=\" ` +(y + componentHeight) +`\" x1=\"0\" y2=\"` +(y + componentHeight) +`\" x2=\"`+panelWidth+`\" style=\"stroke:black;stroke-width:1\" stroke-dasharray=\"5 20\"></line>`;",
                    "\t\t}",
                    "\t}",
                    "}",
                    "svgContent+=`</svg>`;",
                    "",
                    "// make wrapper that hosts this dom and add it to content",
                    "var wrapper;",
                    "var prevWrapper = document.getElementById(\"lineWrapper\");",
                    "if(prevWrapper){",
                    "\t// repurpose old wrapper to host new content",
                    "\twrapper = prevWrapper;",
                    "}",
                    "else{",
                    "\twrapper= document.createElement('div'); // create wrapping div",
                    "",
                    "}",
                    "wrapper.setAttribute(\"id\", \"lineWrapper\"); // set its id",
                    "wrapper.innerHTML= svgContent; //insert string content",
                    "",
                    "",
                    "",
                    "",
                    "//refs.panelContent.el.dom.firstChild.firstChild.firstChild.appendChild(wrapper);",
                    "",
                    "refs.panelContent.el.dom.firstChild.firstChild.firstChild.insertAdjacentElement('afterbegin', wrapper);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "drawHelperLines",
            "designerId": "0059a559-9706-4b62-b823-b5928674e05c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "createSelection",
                "implHandler": [
                    "// gets called when user creates new component - by duplicate or create new",
                    "var text = opts.text,",
                    "\tanswers = opts.answers,",
                    "\tmulti = opts.multi,",
                    "\tcomponent = opts.component;",
                    "",
                    "if(answers.length === 0) {",
                    "\treturn 'Please specify at least one answer';",
                    "}",
                    "if(answers.filter(function(item) { return item.correct; }).length === 0) {",
                    "\treturn 'Please mark at least one answer as correct';",
                    "}",
                    "if(!multi && answers.filter(function(item) { return item.correct; }).length > 1) {",
                    "\treturn 'Only one correct answer is allowed for single selection';",
                    "}",
                    "",
                    "var me = this;",
                    "",
                    "// Testing selection insert Jernej Habjan 2018-07-16",
                    "",
                    "var questionsStore = me.getStore('QuestionsStoreSlides'),",
                    "\ttreeStoreSlides = me.getStore('TreeStoreSlides');",
                    "",
                    "// getting all correct answers",
                    "var correctAnswersIds = []; // this array stores ids of correct answers, where ids are generated as sequence numbers",
                    "",
                    "for (var i = 0; i < answers.length; i++) {",
                    "\tvar element = answers[i];",
                    "\tif (element.correct === true){",
                    "\t\tcorrectAnswersIds.push(element.id); // adds sequence number of this question",
                    "\t}",
                    "}",
                    "",
                    "// getting page id",
                    "var refs = this.getReferences(),",
                    "\tselection = me.getCurrentSlide();",
                    "",
                    "if(!selection){",
                    "\tme.newSlide();",
                    "\tselection = me.getCurrentSlide();",
                    "}",
                    "",
                    "",
                    "var pageGuid = selection.data.id;",
                    "var componentGuid = createGUID();",
                    "",
                    "var now = new Date();",
                    "",
                    "// after adding to database add component to view",
                    "// check if we are updating selection or making new -> if(component)-> update, else -> new",
                    "if(component) {",
                    "\t// updating existing state in store",
                    "\tvar state = component._opts;",
                    "\tstate.question = text;",
                    "\tstate.lookups = Ext.encode(answers);",
                    "\tstate.id = component._opts.id; // keep old id",
                    "\tstate.correctValue = Ext.encode(correctAnswersIds);",
                    "\tstate.fieldType = state.type;",
                    "\tstate.pageId= pageGuid;",
                    "\tstate.lastChanged = now;",
                    "\tstate.changed = 'Y';",
                    "",
                    "\t// update question",
                    "\tvar rec = questionsStore.findRecord('id',state.id);",
                    "\trec.data = state;",
                    "\trec.phantom = true;",
                    "",
                    "\t// delete current answers for this question",
                    "\tvar answerRecord = me.getStore('PersonAnswers').findRecord('questionId', state.id); // find record by questionGuid",
                    "\tif(answerRecord){",
                    "\t\tme.getStore('PersonAnswers').remove(answerRecord);",
                    "\t}",
                    "",
                    "\t// redraw",
                    "\tme.deleteComponent(component, false);",
                    "\tcomponent = me.insertComponent(state);",
                    "\tcomponent.fireEvent('click');",
                    "}",
                    "else {",
                    "\t//adding new record to store",
                    "",
                    "\tvar record = {",
                    "\t\tid : componentGuid,",
                    "\t\tpageId: pageGuid,",
                    "\t\tquestion: text,",
                    "\t\tcreated : now,",
                    "\t\tlastChanged: now,",
                    "\t\tlookups: Ext.encode(answers),",
                    "\t\tcorrectValue: Ext.encode(correctAnswersIds),",
                    "\t\tfieldType:  (multi? \"Multi\" : \"Single\") + \" \" + me.cmpTypes.SELECTION",
                    "\t\t// this renders to string \"Multi selection\" or \"Single selection\"",
                    "\t};",
                    "",
                    "\t// update question store",
                    "\tquestionsStore.add(record)[0].phantom = true;",
                    "\t// update slide",
                    "\ttreeStoreSlides.findRecord('id', me.getCurrentSlide().id).phantom = true;",
                    "",
                    "\tcomponent = me.insertComponent({",
                    "\t\ttype: me.cmpTypes.SELECTION,",
                    "\t\tcls: 'selection',",
                    "\t\thtml: text,",
                    "\t\toptions: answers,",
                    "\t\tmulti: multi,",
                    "\t\tid: componentGuid,",
                    "\t\twidth: opts.width,",
                    "\t\theight: opts.height",
                    "\t});",
                    "\tcomponent.fireEvent('click');",
                    "}",
                    "me.saveState();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createSelection",
            "designerId": "63eeaa5f-a6a1-45ca-b29e-fa3bd54b7940"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cmp"
                ],
                "fn": "createResizer",
                "implHandler": [
                    "",
                    "var me = this,",
                    "    snap = me._pageSetup.snap;",
                    "",
                    "cmp._resizer = Ext.create('Ext.create', 'Ext.resizer.Resizer', {",
                    "    target: Ext.get(cmp),",
                    "    //pinned:true,",
                    "    minWidth: snap,",
                    "    minHeight: snap,",
                    "    heightIncrement: snap,",
                    "    widthIncrement: snap,",
                    "    preserveRatio: false,",
                    "    dynamic: true,",
                    "    transparent: false,",
                    "    handles: 'all', // shorthand for 'n s e w ne nw se sw'",
                    "    listeners: {",
                    "        beforeresize: function(component){",
                    "            component.el.fireEvent('click');",
                    "        },",
                    "",
                    "        resizedrag:function(component, width, height){",
                    "            component.el._opts.width = width;",
                    "            component.el._opts.height = height;",
                    "            component.el._opts.x = component.el.dom.offsetLeft;",
                    "            component.el._opts.y = component.el.dom.offsetTop;",
                    "            me.drawHelperLines(component);",
                    "",
                    "            me.showComponentTools(component);",
                    "        },",
                    "",
                    "",
                    "        resize: function (component, width, height, e, eOpts) {",
                    "            var prevWrapper = document.getElementById(\"lineWrapper\");",
                    "            if(prevWrapper){",
                    "                prevWrapper.outerHTML = \"\"; // remove old wrapper",
                    "            }",
                    "            cmp.width = width;",
                    "            cmp.height = height;",
                    "            cmp._opts.width = width;",
                    "            cmp._opts.height = height;",
                    "",
                    "            // save slide state after resizing element",
                    "",
                    "            var id = component.target._opts.id; // TODO - this line is changed as of in the dragmove function",
                    "            var currentSlide = me.getCurrentSlide();",
                    "",
                    "            // THIS FUNCTION NOW WORKS FOR ALL - IMAGES, AUDIO, SELECTIONS, BECAUSE EVERYONE HAS ITS OWN ID",
                    "",
                    "            // set new info to this new altered component",
                    "            var alteredContent = Ext.decode(currentSlide.data.content);",
                    "            for (var key in alteredContent.components){",
                    "                if(alteredContent.components[key].id == id){",
                    "",
                    "                    // resizer changes width, height and also x,y",
                    "                    alteredContent.components[key].width = me.round(width); // Todo these lines are changes ofc",
                    "                    alteredContent.components[key].height = me.round(height);",
                    "",
                    "                    alteredContent.components[key].x = me.round(component.target.dom.offsetLeft);",
                    "                    alteredContent.components[key].y = me.round(component.target.dom.offsetTop);",
                    "                }",
                    "            }",
                    "            // change store and sync",
                    "            var storeItems = me.getStore('TreeStoreSlides').data.items;",
                    "            for(var i = 0; i < storeItems.length; i++){",
                    "                if(storeItems[i].id == currentSlide.id){",
                    "                    storeItems[i].data.content = Ext.encode(alteredContent);",
                    "                    storeItems[i].data.lastChanged = new Date();",
                    "                    storeItems[i].phantom = true;",
                    "                    break;",
                    "                }",
                    "            }",
                    "            me.saveState();",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createResizer",
            "designerId": "20d85571-e488-424f-ad36-56bba41018b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "serverSync",
                "implHandler": [
                    "// calls sync of everything (slides, questions, answers, pageConfig...) - it retrieves data and pushes latest data to server",
                    "// syncs all data with server - this is called on program load and on navigator onLine",
                    "",
                    "",
                    "var me = this,",
                    "\tlocalStorageData = Ext.decode(localStorage.getItem('mxp_elearning')),",
                    "\tsyncIndicator = Ext.getCmp('syncIndicator'),",
                    "\ttreeStoreSlides = me.getStore('TreeStoreSlides');",
                    "",
                    "var personAnwersCallback = function(){",
                    "",
                    "\t// check if we have any unsubmitted person programs - if so - validate it",
                    "\tif(localStorageData[me.programId].personProgram && localStorageData[me.programId].personProgram.unsynced){",
                    "\t\tme.closePreview(true); // validate program and change button style to default",
                    "\t\tlocalStorageData[me.programId].personProgram.unsynced = false;",
                    "\t\tlocalStorage.setItem('mxp_elearning',Ext.encode(localStorageData));",
                    "\t}",
                    "\tif(callback){ callback(); }",
                    "};",
                    "",
                    "var syncQuestionsCallback = function(){",
                    "\t// after loading slides, load questions",
                    "\tme.updateStatusIndicator(true);",
                    "",
                    "\tif(me.currentPersonProgram){",
                    "\t\t//var params = {programId: me.currentPersonProgram.personTrainingProgramId}; //get all data from current person program id",
                    "\t\tvar params = {programId: me.programId};",
                    "\t\tinitialDataSync('PersonAnswers', 'answers', params, personAnwersCallback, 'questionId', me);",
                    "\t}",
                    "\telse{",
                    "\t\tif (callback){ callback(); }",
                    "\t}",
                    "};",
                    "var syncStateCallback = function(){",
                    "",
                    "",
                    "\t// get info for current program from database - if it exists, its valid program, otherwise its temp debug program",
                    "",
                    "\tvar controller = me.getView().up('mainview').down('programs').getController();",
                    "",
                    "\tcontroller.getStore('StorePrograms').load({",
                    "\t\tcallback: function(){",
                    "\t\t\trec = controller.getStore('StorePrograms').findRecord('id', me.programId);",
                    "\t\t\tif(rec){",
                    "\t\t\t\t// sync slides again so we get back apropriate structure in tree view after adding slides when returning from offline",
                    "\t\t\t\t// TODO - this may be fixed by correctly adding offline slides to storage when retrigering InitialDataSync()",
                    "\t\t\t\t/* treeStoreSlides.sync({",
                    "\t\t\t\t\tcallback: function(){",
                    "\t\t\t\t\t\ttreeStoreSlides.load({",
                    "\t\t\t\t\t\t\tparams: {programId: me.programId},",
                    "\t\t\t\t\t\t\tcallback: function(records, operation, success){",
                    "\t\t\t\t\t\t\t\tprint(\"Slides data reloaded\");",
                    "",
                    "",
                    "\t\t// for(var i = 0; i < treeStoreSlides.data.items.length;i++){",
                    "\t\t// \tvar entry = treeStoreSlides.data.items[i];",
                    "\t\t// \tif(entry.data.categoryId == App.ProgramPageCategoriesEnum.Chapter && !entry.data.children){",
                    "\t\t// \t\tentry.data.children = [];",
                    "\t\t// \t}",
                    "\t\t// }",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t});",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}); */",
                    "\t\t\t}else{",
                    "\t\t\t\tconsole.warn(\"current program doesnt exist in database - wont we resyncing slides\");",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tvar params = {programId: me.programId};",
                    "\tinitialDataSync('QuestionsStoreSlides', 'questions', params, syncQuestionsCallback, 'id', me);",
                    "",
                    "};",
                    "",
                    "// update sync icon",
                    "syncIndicator.removeCls('fa-check fa-refresh fa-spin fa-exclamation-triangle warning success');",
                    "syncIndicator.addCls(\"fa-spin fa-refresh warning\");",
                    "syncIndicator.tooltip.html = 'Syncing';",
                    "",
                    "if(localStorageData[me.programId].pageSetup){ // TODO retrieve it later from database",
                    "\tme._pageSetup = localStorageData[me.programId].pageSetup;",
                    "}",
                    "var params = {programId: me.programId};",
                    "initialDataSync('TreeStoreSlides', 'slides', params, syncStateCallback, 'id', me);",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "serverSync",
            "designerId": "fd86d987-224d-471e-830d-8f8dccc84cd9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderThumbnails",
                "implHandler": [
                    "// TODO - Jernej Habjan 2018-07-12",
                    "// Trying to replace slide icon in treeview by rendered content",
                    "",
                    "",
                    "// todo - check if there are any children - possible crash here",
                    "",
                    "// get all currently shown nodes in tree view - only parent of collapsed nodes is visible",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "var me = this,",
                    "\trefs = me.getReferences(),",
                    "\ttreeStore = me.getStore('TreeStoreSlides');",
                    "",
                    "",
                    "var callback = function(url, base64EncodedImg){",
                    "",
                    "",
                    "\tvar treeView = refs.treeSlides.el.dom.children[0].children[1].children[0].children[1];",
                    "\tif(!treeView){",
                    "\t\tconsole.warn(\"Some error triggered after duplicate\");",
                    "\t\treturn;",
                    "\t}",
                    "\ttreeView = treeView.children;",
                    "\t",
                    "\t",
                    "\t",
                    "\tfor (var i=0, n=treeView.length; i < n; i++){",
                    "",
                    "\t\tvar children = treeView[i].children[0].children[0].children[0].children[0].children;",
                    "\t\tvar slide = children[children.length - 2]; // slots before that occupy indents in tree view, slot after that is text",
                    "",
                    "\t\t// uncomment this if to allow rendering on all tree nodes - and not only on slides",
                    "\t\tif(slide.classList.contains(\"x-tree-icon-leaf\")){ // check if it is slide",
                    "\t\t\t//slide.outerHTML = '<div role=\"presentation\" class=\"  x-tree-icon\"><img src=\"https://www.vaporfi.com.au/media/catalog/product/cache/34/thumbnail/600x600/9df78eab33525d08d6e5fb8d27136e95/v/z/vz_eliquid_juicy_red_apple.jpg\" style=\"width:20px; height:20px;\"></div>';",
                    "",
                    "\t\t\tslide.outerHTML = '<div role=\"presentation\" class=\"  x-tree-icon\"><img src=\"' + url + '\" style=\"width:20px; height:20px;\"></div>';",
                    "",
                    "\t\t\t// Todo - replace apple photo with rendered slide with scale of 20, 20",
                    "\t\t}",
                    "\t}",
                    "};",
                    "",
                    "me.captureSlide(callback);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "renderThumbnails",
            "designerId": "bfd1e68a-1385-448c-814c-8e72cbc6104a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getNumQuestions",
                "implHandler": [
                    "var me = this;",
                    "//return Object.keys(Ext.decode(localStorage.getItem('mxp_elearning'))[me.programId].questions).length;",
                    "return me.getStore('QuestionsStoreSlides').data.items.length;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getNumQuestions",
            "designerId": "1ecb3d81-fe3d-4fb3-b6ef-1b1ba6169ce0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "synced"
                ],
                "fn": "updateStatusIndicator",
                "implHandler": [
                    "var me = this,",
                    "\tlocalStorageData = Ext.decode(localStorage.getItem('mxp_elearning')),",
                    "\tsyncIndicator = Ext.getCmp('syncIndicator');",
                    "",
                    "if(synced){",
                    "\tsyncIndicator.removeCls('fa-check fa-refresh fa-spin fa-exclamation-triangle warning success');",
                    "\tsyncIndicator.addCls(\"fa-check success\");",
                    "\tsyncIndicator.tooltip.html = 'Synced';",
                    "",
                    "}",
                    "else{",
                    "\tsyncIndicator.removeCls('fa-check fa-refresh fa-spin fa-exclamation-triangle warning success');",
                    "\tsyncIndicator.addCls(\"fa-exclamation-triangle warning\");",
                    "\tsyncIndicator.tooltip.html = 'Not Synced';",
                    "",
                    "",
                    "}",
                    "// not initialized when duplicating programs",
                    "if(!localStorageData[me.programId]){",
                    "\tlocalStorageData[me.programId] = {};",
                    "}",
                    "if(!localStorageData[me.programId].pageSetup){",
                    "\tlocalStorageData[me.programId].pageSetup = {};",
                    "}",
                    "// change state of this program sync state so it can be visible in programs tab if this program is synced or not",
                    "localStorageData[me.programId].pageSetup.programSynced = synced;",
                    "print(\"setting page setup programSynced to\", synced);",
                    "localStorage.setItem('mxp_elearning', Ext.encode(localStorageData));"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateStatusIndicator",
            "designerId": "0d8cc0e7-a915-40b2-ac32-2cc237f5934d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validatePersonProgram",
                "implHandler": [
                    "var me = this,",
                    "\trefs = me.getReferences(),",
                    "\tpersonProgramsStore = me.getStore('PersonPrograms'),",
                    "\tpersonAnswersStore = me.getStore('PersonAnswers'),",
                    "\tquestionsStore = me.getStore('QuestionsStoreSlides');",
                    "",
                    "// we / timer toggled preview off - validate forms and submit",
                    "// here we can read the records id to use in posting answers",
                    "// add completion time minutes to initial programStarted time",
                    "",
                    "",
                    "",
                    "// iterate through questions and check if answer has been added to store - if it hasnt, still create an answer for this question",
                    "// this is a solve to a bug that when unchecking everything at multi-select, we dont post an answer and than retrieve previous answer back",
                    "for(var i = 0; i < questionsStore.data.items.length; i++){",
                    "\tvar question = questionsStore.data.items[i].data;",
                    "\t// check if answer exists",
                    "\tvar answerExists = personAnswersStore.findRecord('questionId', question.id);",
                    "\tif(!answerExists){",
                    "\t\tvar now = new Date();",
                    "\t\tvar recordAnswers = {",
                    "\t\t\tquestionId: question.id,",
                    "\t\t\tid: createGUID(),",
                    "\t\t\tcreated: now,",
                    "\t\t\tlastChanged: now,",
                    "\t\t\tpersonProgramId: me.currentPersonProgram.personTrainingProgramId,",
                    "\t\t\tanswer:{},",
                    "\t\t\tscore: 0 // TEMP - TODO CHANGE RECORD AFTER EVALUATING",
                    "\t\t};",
                    "\t\t// add all answers for this question as false",
                    "\t\tvar answersTEMP = Ext.decode(question.lookups);",
                    "\t\tfor(var j = 0; j < answersTEMP.length; j++){",
                    "\t\t\trecordAnswers.answer[j] = false;",
                    "\t\t}recordAnswers.answer = Ext.encode(recordAnswers.answer);",
                    "",
                    "\t\t// add this new record to store",
                    "\t\tvar answerRec = personAnswersStore.add(recordAnswers)[0];",
                    "\t\tanswerRec.phantom = true;",
                    "\t}",
                    "}",
                    "",
                    "// GOOD TO KNOW - batchActions is disabled on store, so every request is handled on its own ->batchActions: false,",
                    "",
                    "// get scores for each question and total",
                    "var programScore = me.evaluate();",
                    "var questionsScores = programScore.questions;",
                    "var totalProgramScore = programScore.totalProgramScore;",
                    "",
                    "// submit answers to server - these answers have written score in them",
                    "personAnswersStore.sync();",
                    "me.saveState();",
                    "",
                    "",
                    "",
                    "if(!me.currentPersonProgram){",
                    "\tconsole.warn(\"for some reason current person program id is not set - it should be created new if person doesnt have any records yet or it should be recieved from store.\");",
                    "\treturn;",
                    "}",
                    "",
                    "// get score results:",
                    "var scoreResults;",
                    "",
                    "if(me.currentPersonProgram.attempt < me.programData.maxAttemptsTrainingMode + me.programData.maxAttemptsScoreMode){",
                    "\tif(totalProgramScore >= me.programData.passScore){",
                    "\t\t// we passed",
                    "\t\tscoreResults = App.ProgramStatuses.Passed;",
                    "",
                    "",
                    "\t\tprint(\"User\", me.person, \"has been awarded certificate\", App.CoursesAndCertificates[me.programData.certificateFileName]);",
                    "\t\tprint(\"todo- show certificate modal window here\");",
                    "",
                    "\t\tme.showCertificate({",
                    "\t\t\tperson:me.person,",
                    "\t\t\tcertificateName: App.CoursesAndCertificates[me.programData.certificateFileName]",
                    "\t\t});",
                    "",
                    "\t}else{",
                    "\t\t// we tried non -last time and we failed - status is chagned to discontinued",
                    "\t\tscoreResults = App.ProgramStatuses.Discontinued;",
                    "\t}",
                    "}else{",
                    "\tif(totalProgramScore < me.programData.passScore){",
                    "\t\t// if we tried last time and we didn't get enough we failed",
                    "\t\tscoreResults = App.ProgramStatuses.Failed;",
                    "\t}else{",
                    "\t\t// we tried last time and we passed",
                    "\t\tscoreResults = App.ProgramStatuses.Passed;",
                    "\t}",
                    "}",
                    "",
                    "",
                    "var existingRecord = personProgramsStore.findRecord('personTrainingProgramId', me.currentPersonProgram.personTrainingProgramId);",
                    "var alteredRecord = {",
                    "\tpersonProgramGuid: me.currentPersonProgram.personTrainingProgramId,",
                    "\tlastChanged: new Date(),",
                    "\tprogramCompleted: new Date(),",
                    "\tprogramStatusId: scoreResults,",
                    "\tchanged: 'Y'",
                    "};",
                    "// add new content to this record and update it",
                    "existingRecord.data = alteredRecord;",
                    "existingRecord.phantom = true;",
                    "personProgramsStore.sync();",
                    "",
                    "",
                    "// temp print text to show user that program has been evaluated",
                    "var status = \"\";",
                    "for(var key in App.lookups.ProgramStatuses){",
                    "\tif(App.lookups.ProgramStatuses[key].id == scoreResults){",
                    "\t\tstatus = App.lookups.ProgramStatuses[key].text;",
                    "\t}",
                    "}",
                    "Ext.toast(\"Program successfully validated with score \" + totalProgramScore + \" and score result \" + status);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validatePersonProgram",
            "designerId": "5517d35a-a135-4474-937e-436f55a16cdc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "startPreviewTimer",
                "implHandler": [
                    "// this timer is also started when returning on editSlides page so it auto removes previewing (continue) label",
                    "var me = this,",
                    "\trefs = me.getReferences();",
                    "if(me.previewTimer){",
                    "\t// preview timer already exists so dont make another interval",
                    "\treturn;",
                    "}",
                    "// Update the count down every 1 second",
                    "me.previewTimer = setInterval(function() {",
                    "\t// add completion time minutes to initial programStarted time",
                    "\tvar endTime = new Date(new Date(me.currentPersonProgram.programStarted).getTime() +",
                    "\t\t\t\t\t\t   me.programData.completionTime * 60000); // completion time in database is in minutes",
                    "\tvar now = new Date();",
                    "",
                    "\t// Find the distance between now an the count down date",
                    "\tvar distance = endTime.getTime() - now.getTime();",
                    "",
                    "\t// Time calculations for days, hours, minutes and seconds",
                    "\tvar days = Math.floor(distance / (1000 * 60 * 60 * 24));",
                    "\tvar hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));",
                    "\tvar minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));",
                    "\tvar seconds = Math.floor((distance % (1000 * 60)) / 1000);",
                    "",
                    "",
                    "\tvar timerCountdownText = refs.toolbarPreview.el.down('#timerCountdown');",
                    "\ttimerCountdownText.dom.innerHTML = \"Remaining: \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \";",
                    "",
                    "",
                    "\t//print(\"timer interval\",\"Remaining: \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \" );",
                    "\t// If the count down is finished, write some text",
                    "\tif (distance < 0) {",
                    "\t\tclearInterval(me.previewTimer);",
                    "",
                    "\t\ttimerCountdownText.dom.innerHTML = \"EXPIRED\";",
                    "\t\tExt.toast(\"Time is up! We will evaluate your score.\");",
                    "",
                    "\t\tme.closePreview(true);",
                    "",
                    "",
                    "\t}",
                    "}, 1000);",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "startPreviewTimer",
            "designerId": "6f8d2cad-b190-4020-9696-d27f933db449"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opts"
                ],
                "fn": "showCertificate",
                "implHandler": [
                    "var me = this;",
                    "",
                    "certificateWindow = me.getView().add({ xtype: 'certificate' });",
                    "certificateWindow.getController().show(opts);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showCertificate",
            "designerId": "c7ac1466-628c-4742-a3d7-5002c99890c6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "captureSlide",
                "implHandler": [
                    "",
                    "var me = this,",
                    "\trefs = me.getReferences();",
                    "",
                    "",
                    "// TODO - Jernej Habjan 2018-08-16 - saving current slides' thumbnails in",
                    "// localStorageData[me.programId].slides[me.getCurrentSlide().id].content.thumbnail",
                    "",
                    "",
                    "//var thumbnailb64 = btoa(me.renderThumbnail(me.getCurrentSlide()));",
                    "",
                    "function dataURItoBlob(dataURI) {",
                    "    // convert base64/URLEncoded data component to raw binary data held in a string",
                    "    var byteString;",
                    "    if (dataURI.split(',')[0].indexOf('base64') >= 0)",
                    "        byteString = atob(dataURI.split(',')[1]);",
                    "    else",
                    "        byteString = unescape(dataURI.split(',')[1]);",
                    "",
                    "    // separate out the mime component",
                    "    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];",
                    "",
                    "    // write the bytes of the string to a typed array",
                    "    var ia = new Uint8Array(byteString.length);",
                    "    for (var i = 0; i < byteString.length; i++) {",
                    "        ia[i] = byteString.charCodeAt(i);",
                    "    }",
                    "",
                    "    return new Blob([ia], {type:mimeString});",
                    "}",
                    "",
                    "html2canvas(refs.panelContent.el.dom,",
                    "\t\t\t{",
                    "\tscale:0.1",
                    "}).then(canvas => {",
                    "",
                    "    //document.body.appendChild(canvas);",
                    "\t//print(\"canvas\",   btoa(canvas.toDataURL('image/png', 0.1)));",
                    "\tvar dataURL = canvas.toDataURL('image/jpeg', 0.5);",
                    "",
                    "\tvar currentSlide = me.getCurrentSlide();",
                    "\tvar rec = me.getStore(\"TreeStoreSlides\").findRecord('id', currentSlide.data.id);",
                    "",
                    "\tif(!rec){",
                    "\t\treturn;",
                    "\t}",
                    "\t",
                    "\tvar content =  Ext.decode(rec.data.content);",
                    "\tcontent.thumbnail = LZString.compressToEncodedURIComponent(dataURL);",
                    "\trec.data.content = Ext.encode(content);",
                    "",
                    "\trec.phantom = true;",
                    "",
                    "\tprint(\"printing record\", rec);",
                    "",
                    "",
                    "\tvar blob = dataURItoBlob(dataURL);",
                    "",
                    "",
                    "\t/*",
                    "\tvar img = new Image();",
                    "\timg.src = URL.createObjectURL(blob);",
                    "\tdocument.body.appendChild(img);",
                    "*/",
                    "",
                    "",
                    "\tcallback(URL.createObjectURL(blob), LZString.compressToEncodedURIComponent(dataURL));",
                    "\t// dataUrl = atob(Base64String.decompress(...))",
                    "});",
                    "// END ENCODING PIC",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "captureSlide",
            "designerId": "d03ea6be-a8cb-4f2e-b1cd-5d7b88700ad9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "silently"
                ],
                "fn": "clean",
                "implHandler": [
                    "var me = this,",
                    "\tslidesStore = me.getStore('TreeStoreSlides'),",
                    "\tquestionsStore = me.getStore('QuestionsStoreSlides'),",
                    "\tanswersStore = me.getStore('PersonAnswers'),",
                    "\tprogramsStore = me.getStore('PersonPrograms');",
                    "",
                    "if(silently){",
                    "\tslidesStore.loadData([],false);",
                    "\tslidesStore.getRootNode().removeAll(false, true,true);",
                    "\tquestionsStore.loadData([],false);",
                    "\tanswersStore.loadData([],false);",
                    "\tprogramsStore.loadData([],false);",
                    "\treturn;",
                    "}",
                    "",
                    "// loud delete all stores - used when deleting program",
                    "",
                    "",
                    "// clean all stores",
                    "slidesStore.loadData([],false);",
                    "slidesStore.getRootNode().removeAll(false, true,true);",
                    "questionsStore.loadData([],false);",
                    "answersStore.loadData([],false);",
                    "programsStore.loadData([],false);",
                    "",
                    "",
                    "// load all data into stores so you can delete this data after",
                    "",
                    "",
                    "slidesStore.load({",
                    "\tparams:  {programId: me.programId},",
                    "\tcallback: function(){",
                    "\t\tquestionsStore.load({",
                    "\t\t\tparams:  {programId: me.programId},",
                    "\t\t\tcallback: function(){",
                    "\t\t\t\tanswersStore.load({",
                    "\t\t\t\t\tparams:  {programId: me.programId},",
                    "\t\t\t\t\tcallback: function(){",
                    "",
                    "",
                    "\t\t\t\t\t\tfor(var i = 0; i < slidesStore.data.items.length; i++){",
                    "\t\t\t\t\t\t\tvar rec = slidesStore.data.items[i];",
                    "\t\t\t\t\t\t\trec.parentNode.removeChild(rec);",
                    "\t\t\t\t\t\t\t//slidesStore.remove(slidesStore.data.items[i]);",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tslidesStore.sync();",
                    "\t\t\t\t\t\tfor(var i = 0; i < questionsStore.data.items.length; i++){",
                    "\t\t\t\t\t\t\tquestionsStore.remove(questionsStore.data.items[i]);",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tfor(var i = 0; i < answersStore.data.items.length; i++){",
                    "\t\t\t\t\t\t\tanswersStore.remove(answersStore.data.items[i]);",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t});",
                    "\t}",
                    "});",
                    "",
                    "",
                    "programsStore.load({",
                    "\tparams: { personId: me.personId, programId: me.programId },",
                    "\tcallback: function(){",
                    "\t\tfor(var i = 0; i < programsStore.data.items.length; i++){",
                    "\t\t\tprogramsStore.remove(programsStore.data.items[i]);",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "",
                    "",
                    "",
                    "/*Ext.Promise.all(",
                    "\t[",
                    "\t\tslidesStore.load({",
                    "\t\t\tparams:  {programId: me.programId}",
                    "\t\t}),",
                    "\t\tquestionsStore.load({",
                    "\t\t\tparams:  {programId: me.programId}",
                    "\t\t}),",
                    "\t\tanswersStore.load({",
                    "\t\t\tparams:  {programId: me.programId}",
                    "\t\t}),",
                    "\t\tprogramsStore.load({",
                    "\t\t\tparams: { personId: me.personId, programId: me.programId }",
                    "\t\t}),",
                    "\t]).then(function(results) {",
                    "\tprint(\"all promises returned\");",
                    "",
                    "",
                    "\tfor(var i = 0; i < slidesStore.data.items.length; i++){",
                    "\t\tvar rec = slidesStore.data.items[i];",
                    "\t\trec.parentNode.removeChild(rec);",
                    "\t\t//slidesStore.remove(slidesStore.data.items[i]);",
                    "\t}",
                    "\tslidesStore.sync();",
                    "\tfor(var i = 0; i < questionsStore.data.items.length; i++){",
                    "\t\tquestionsStore.remove(questionsStore.data.items[i]);",
                    "\t}",
                    "\tfor(var i = 0; i < answersStore.data.items.length; i++){",
                    "\t\tanswersStore.remove(answersStore.data.items[i]);",
                    "\t}",
                    "\tfor(var i = 0; i < programsStore.data.items.length; i++){",
                    "\t\tprogramsStore.remove(programsStore.data.items[i]);",
                    "\t}",
                    "",
                    "});",
                    "*/",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "clean",
            "designerId": "5c875231-03cb-4e08-9604-734cd18363dd"
        }
    ]
}