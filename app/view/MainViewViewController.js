/*
 * File: app/view/MainViewViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('eLearning.view.MainViewViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainview',

    newSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = me.getStore('StoreSlides'),
            sequence = Ext.Array.max(Ext.pluck2(store.data.items, 'data.sequence')) || 0,
            content = '';

        sequence++;

        var slide = store.add({
            sequence: sequence,
            title: 'New Slide ' + sequence,
            content: content
        })[0];

        refs.gridSlides.setSelection(slide);
    },

    deleteSlide: function(slide) {
        var me = this,
            refs = me.getReferences();

        slide = slide || me.getCurrentSlide();

        if(slide) {
            var nextSlideIdx = slide.store.indexOf(slide) - 1,
                nextSlide = slide.store.getAt(nextSlideIdx >= 0 ? nextSlideIdx : 1);

            if(refs.panelContent.items.items.length > 0) {
                Ext.Msg.confirm('Delete slide', 'Are you sure?', function(btn) {
                    if(btn == 'yes') {
                        slide.store.remove(slide);
                        refs.panelContent.removeAll();
                        refs.gridSlides.setSelection(nextSlide);
                    }
                });
            }
            else {
                slide.store.remove(slide);
                refs.panelContent.removeAll();
                refs.gridSlides.setSelection(nextSlide);
            }
        }
    },

    getCurrentSlide: function() {
        var me = this,
            refs = me.getReferences();

        return refs.gridSlides.getSelection()[0];
    },

    nextSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = refs.gridSlides.store,
            slide = me.getCurrentSlide(),
            nextSlideIdx = store.indexOf(slide) + 1,
            nextSlide = store.getAt(nextSlideIdx);

        if(nextSlide) {
            refs.gridSlides.setSelection(nextSlide);
        }
    },

    prevSlide: function() {
        var me = this,
            refs = me.getReferences(),
            store = refs.gridSlides.store,
            slide = me.getCurrentSlide(),
            nextSlideIdx = store.indexOf(slide) - 1,
            nextSlide = store.getAt(nextSlideIdx);

        if(nextSlide) {
            refs.gridSlides.setSelection(nextSlide);
        }
    },

    togglePreview: function(preview) {
        var me = this,
            refs = me.getReferences();

        refs.panelMenu.setVisible(!preview);
        refs.toolbarEdit.setVisible(!preview);
        refs.toolbarPreview.setVisible(!!preview);
        refs.panelContent[preview ? 'removeCls' : 'addCls']('edit');
        refs.panelContent[preview ? 'addCls' : 'removeCls']('preview');

        refs.panelSlide.setMargin(preview ? '10' : '10 10 10 0');

        if(preview) {
            me.saveState(refs.gridSlides.getSelection()[0]);
            refs.gridSlides.setSelection(refs.gridSlides.store.getAt(0));
        }
    },

    getFreePosition: function() {
        var me = this,
            refs = me.getReferences(),
            snap = 25,
            pos = {
                x: snap*2,
                y: snap*2,
                width: refs.panelContent.el.getWidth() - 2*snap*2,
                height: 0
            };

        Ext.each(refs.panelContent.items.items, function(component) {
            pos.y = Math.max(pos.y, component.y + component.el.getHeight() + snap);
        });

        return pos;
    },

    saveState: function(slide) {
        var me = this,
            refs = me.getReferences(),
            components = [];

        slide = slide || me.getCurrentSlide();

        if(slide) {
            Ext.each(refs.panelContent.items.items, function(cmp) {
                var layout = cmp.config.layout;
                var items = cmp.config.items;

                if(layout) {
                    delete layout.owner;
                }

                var item = {
                    xtype: cmp.xtype,
                    draggable: cmp.draggable,
                    resizable: cmp.resizable,
                    cls: cmp.cls,
                    width: cmp.width,
                    height: cmp.height,
                    x: cmp.x,
                    y: cmp.y,
                    style: cmp.style,
                    //
                    html: cmp._html,
                    //
                    layout: layout || undefined,
                    items: items || undefined
                };

                components.push(item);
            });

            slide.set('content', Ext.encode(components));
        }
    },

    addComponentListeners: function(item) {
        var me = this;

        item.el.on('click', function(e, t) {
            if(me._selectedComponent) {
                me._selectedComponent.removeCls('selected');
            }
            me._selectedComponent = item;
            me._selectedComponent.addCls('selected');
        });

        item.el.on('dblclick', function(e, t) {
            me.editComponent();
        });
    },

    insertComponent: function(opts) {
        this.insertHTMLComponent(opts);

        // opts = Ext.applyIf(opts || {}, {
        //     height: null,
        //     width: null,
        //     x: null,
        //     y: null,
        //     html: '',
        //     style: null
        // });

        // var me = this,
        //     refs = me.getReferences(),
        //     pos = me.getFreePosition(),
        //     component = {
        //         xtype: "container",
        //         cls: [
        //             "component",
        //             "draggable"
        //         ],
        //         draggable: true,
        //         resizable: {
        //             preserveRatio: false,
        //             dynamic: true,
        //             snap: {
        //                 x: 25,
        //                 y: 25
        //             }
        //         },
        //         //
        //         height: opts.height || pos.height,
        //         width: opts.width || pos.width,
        //         x: opts.x || pos.x,
        //         y: opts.y || pos.y,
        //         html: opts.html,
        //         style: opts.style,
        //         //
        //         _html: opts.html
        //     };

        // if(!me.getCurrentSlide()) {
        //     me.newSlide();
        // }

        // var cmp = refs.panelContent.add(component);
        // me.addComponentListeners(cmp);
        // cmp.el.fireEvent('click', cmp);
    },

    insertHTMLComponent: function(opts) {
        opts = Ext.applyIf(opts || {}, {
            height: null,
            width: null,
            x: null,
            y: null,
            html: '',
            style: null
        });

        var snap = 25;

        var me = this,
            refs = me.getReferences(),
            pos = me.getFreePosition(),
            parentEl = refs.panelContent.el.down('#html-slide');

        if(!me.getCurrentSlide()) {
            me.newSlide();
        }

        var cmp = document.createElement("div");
        // var cmp = document.createElement("img");

        cmp.classList.add('html-component');
        //cmp.src = 'resources/images/example.jpg';
        cmp.width = 400;
        cmp.height = 300;
        cmp.style.width = '400px';
        cmp.style.height = '300px';
        cmp.style.left = pos.x + 'px';
        cmp.style.top = pos.y + 'px';

        cmp.innerHTML = opts.html;

        cmp = parentEl.dom.appendChild(cmp);

        cmp._dragger = new Ext.drag.Source({
            element: Ext.get(cmp),
            constrain: {
                element: parentEl,
                snap: {
                    x: snap,
                    y: snap
                },
            },
            listeners: {
                beforedragstart: function(component, info, event, eOpts) {
                    if(info.eventTarget.classList.contains('x-resizable-handle')) {
                        return false;
                    }
                },
                dragcancel: function(component, info, event, eOpts) {
                    console.log('dragcancel', arguments);
                },
                dragend: function(component, info, event, eOpts) {
                    console.log('dragend', arguments);
                },
                dragmove: function(component, info, event, eOpts) {
                    var pos = info.element.current,
                        msg = Ext.String.format('X: {0}, Y: {1}', pos.x, pos.y);

                    console.log(msg);
                },
                dragstart: function(component, info, event, eOpts) {
                    console.log('dragstart', arguments);
                }
            }
        });

        cmp._resizer = Ext.create('Ext.create', 'Ext.resizer.Resizer', {
            target: Ext.get(cmp),
            pinned:true,
            minWidth: snap,
            minHeight: snap,
            heightIncrement: snap,
            widthIncrement: snap,
            preserveRatio: false,
            dynamic:true,
            transparent: false,
            handles: 'all' // shorthand for 'n s e w ne nw se sw'
        });
    },

    editComponent: function(component) {
        var me = this,
            refs = me.getReferences(),
            wnd = me.getView().add({
                xtype: 'texteditor'
            });

        component = component || me._selectedComponent;

        if(component) {
            wnd.getController().show({
                value: component._html,
                callback: function(value) {
                    component._html = value;
                    component.update(value);
                },
                scope: me
            });
        }
    },

    deleteComponent: function() {
        var me = this,
            refs = this.getReferences();

        if(me._selectedComponent) {
            refs.panelContent.remove(me._selectedComponent);
            me._selectedComponent = null;
        }
    },

    insertTitle: function() {
        var me = this;

        me.insertComponent({
            html: '<font face="tahoma" size="6">Title</font>',
            height: 50
        });
    },

    insertText: function() {
        var me = this;

        me.insertComponent({
            html: '<font face="tahoma" size="4">Text</font>',
            height: 100
        });
    },

    insertImage: function() {
        var me = this;

        me.insertComponent({
            //html: '<img src="resources/images/example.jpg"></img>',
            html: '',
            style: 'background-image:url(resources/images/example.jpg);',
            height: 275,
        });
    },

    insertSelection: function(opts) {
        opts = Ext.applyIf(opts || {}, {
            multi: false
        });

        var me = this,
            refs = me.getReferences(),
            pos = me.getFreePosition(),
            wnd = me.getView().add({
                xtype: 'selectioneditor'
            });

        wnd.getController().show({
            multi: opts.multi,
            callback: function(answers) {

                if(answers.length === 0) {
                    return 'Please specify at least one answer';
                }
                if(answers.filter(function(item) { return item.correct; }).length === 0) {
                    return 'Please mark at least one answer as correct';
                }
                if(!opts.multi && answers.filter(function(item) { return item.correct; }).length > 1) {
                    return 'Only one correct answer is allowed for single selection';
                }

                var component = {
                    xtype: opts.multi ? 'checkboxgroup' : 'radiogroup',
                    fieldLabel: '',
                    cls: [
                        'draggable'
                    ],
                    draggable: true,
                    resizable: true,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [],
                    //
                    x: pos.x,
                    y: pos.y,
                    width: pos.width
                };

                Ext.each(answers, function(answer) {
                    component.items.push({
                        xtype: opts.multi ? 'checkboxfield' : 'radiofield',
                        boxLabel: answer.text,
                        cls: answer.correct ? 'correct' : null,
                        _correct: answer.correct
                    });
                });

                if(!me.getCurrentSlide()) {
                    me.newSlide();
                }

                var cmp = refs.panelContent.add(component);
                me.addComponentListeners(cmp);
                cmp.el.fireEvent('click', cmp);

            },
            scope: me
        });
    },

    onGridSlidesDeselect: function(rowmodel, record, index, eOpts) {
        var me = this;

        me.saveState(record);
    },

    onGridSlidesSelect: function(rowmodel, record, index, eOpts) {
        var me = this,
            refs = me.getReferences(),
            content = record.get('content') || "[]",
            items = Ext.decode(content);

        Ext.each(items, function(item) {
            item._html = item.html;
        });

        refs.panelContent.removeAll();
        refs.panelContent.add(items);

        Ext.each(refs.panelContent.items.items, function(item) {
            me.addComponentListeners(item);
        });

        me._selectedComponent = null;
    },

    onMainViewBoxReady: function(component, width, height, eOpts) {
        var me = this,
            refs = me.getReferences();

        me._selectedComponent = null;

        refs.panelContent.removeAll();
        refs.toolbarPreview.hide();
    }

});
